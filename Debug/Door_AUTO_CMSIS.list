
Door_AUTO_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c24  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f0c  08003f0c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08003f0c  08003f0c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f0c  08003f0c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b8  20000098  08003fac  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001250  08003fac  00021250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac58  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d45  00000000  00000000  0002ad19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  0002ca60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d0  00000000  00000000  0002d128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013bb3  00000000  00000000  0002d6f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007f37  00000000  00000000  000412ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006ef59  00000000  00000000  000491e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b813b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bb0  00000000  00000000  000b81b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d1c 	.word	0x08003d1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	08003d1c 	.word	0x08003d1c

08000150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000154:	4b05      	ldr	r3, [pc, #20]	; (800016c <HAL_IncTick+0x1c>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	461a      	mov	r2, r3
 800015a:	4b05      	ldr	r3, [pc, #20]	; (8000170 <HAL_IncTick+0x20>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	4413      	add	r3, r2
 8000160:	4a03      	ldr	r2, [pc, #12]	; (8000170 <HAL_IncTick+0x20>)
 8000162:	6013      	str	r3, [r2, #0]
}
 8000164:	bf00      	nop
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000000 	.word	0x20000000
 8000170:	200011d4 	.word	0x200011d4

08000174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000174:	b480      	push	{r7}
 8000176:	b083      	sub	sp, #12
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	f103 0208 	add.w	r2, r3, #8
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800018c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f103 0208 	add.w	r2, r3, #8
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f103 0208 	add.w	r2, r3, #8
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr

080001b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001b2:	b480      	push	{r7}
 80001b4:	b083      	sub	sp, #12
 80001b6:	af00      	add	r7, sp, #0
 80001b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2200      	movs	r2, #0
 80001be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001c0:	bf00      	nop
 80001c2:	370c      	adds	r7, #12
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr

080001ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ca:	b480      	push	{r7}
 80001cc:	b085      	sub	sp, #20
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
 80001d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	689a      	ldr	r2, [r3, #8]
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	683a      	ldr	r2, [r7, #0]
 80001ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	1c5a      	adds	r2, r3, #1
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000226:	d103      	bne.n	8000230 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e00c      	b.n	800024a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3308      	adds	r3, #8
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	e002      	b.n	800023e <vListInsert+0x2e>
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	685b      	ldr	r3, [r3, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	429a      	cmp	r2, r3
 8000248:	d2f6      	bcs.n	8000238 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	683a      	ldr	r2, [r7, #0]
 8000258:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	68fa      	ldr	r2, [r7, #12]
 800025e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	6892      	ldr	r2, [r2, #8]
 8000296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	6852      	ldr	r2, [r2, #4]
 80002a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d103      	bne.n	80002b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
	...

080002d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d109      	bne.n	80002fc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80002e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ec:	f383 8811 	msr	BASEPRI, r3
 80002f0:	f3bf 8f6f 	isb	sy
 80002f4:	f3bf 8f4f 	dsb	sy
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	e7fe      	b.n	80002fa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80002fc:	f001 fd24 	bl	8001d48 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000308:	68f9      	ldr	r1, [r7, #12]
 800030a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800030c:	fb01 f303 	mul.w	r3, r1, r3
 8000310:	441a      	add	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	2200      	movs	r2, #0
 800031a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800032c:	3b01      	subs	r3, #1
 800032e:	68f9      	ldr	r1, [r7, #12]
 8000330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000332:	fb01 f303 	mul.w	r3, r1, r3
 8000336:	441a      	add	r2, r3
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	22ff      	movs	r2, #255	; 0xff
 8000340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	22ff      	movs	r2, #255	; 0xff
 8000348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d114      	bne.n	800037c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d01a      	beq.n	8000390 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3310      	adds	r3, #16
 800035e:	4618      	mov	r0, r3
 8000360:	f001 f82a 	bl	80013b8 <xTaskRemoveFromEventList>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d012      	beq.n	8000390 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <xQueueGenericReset+0xcc>)
 800036c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	f3bf 8f4f 	dsb	sy
 8000376:	f3bf 8f6f 	isb	sy
 800037a:	e009      	b.n	8000390 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3310      	adds	r3, #16
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff fef7 	bl	8000174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	3324      	adds	r3, #36	; 0x24
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff fef2 	bl	8000174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000390:	f001 fd08 	bl	8001da4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000394:	2301      	movs	r3, #1
}
 8000396:	4618      	mov	r0, r3
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	e000ed04 	.word	0xe000ed04

080003a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af02      	add	r7, sp, #8
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	4613      	mov	r3, r2
 80003b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <xQueueGenericCreate+0x28>
 80003b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003bc:	f383 8811 	msr	BASEPRI, r3
 80003c0:	f3bf 8f6f 	isb	sy
 80003c4:	f3bf 8f4f 	dsb	sy
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	e7fe      	b.n	80003ca <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d102      	bne.n	80003d8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
 80003d6:	e004      	b.n	80003e2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	68ba      	ldr	r2, [r7, #8]
 80003dc:	fb02 f303 	mul.w	r3, r2, r3
 80003e0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80003e2:	69fb      	ldr	r3, [r7, #28]
 80003e4:	3348      	adds	r3, #72	; 0x48
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fd6c 	bl	8001ec4 <pvPortMalloc>
 80003ec:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80003ee:	69bb      	ldr	r3, [r7, #24]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d00b      	beq.n	800040c <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80003f4:	69bb      	ldr	r3, [r7, #24]
 80003f6:	3348      	adds	r3, #72	; 0x48
 80003f8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	4613      	mov	r3, r2
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	68b9      	ldr	r1, [r7, #8]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f000 f805 	bl	8000416 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800040c:	69bb      	ldr	r3, [r7, #24]
	}
 800040e:	4618      	mov	r0, r3
 8000410:	3720      	adds	r7, #32
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800042a:	69bb      	ldr	r3, [r7, #24]
 800042c:	69ba      	ldr	r2, [r7, #24]
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e002      	b.n	8000438 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000432:	69bb      	ldr	r3, [r7, #24]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800043e:	69bb      	ldr	r3, [r7, #24]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000444:	2101      	movs	r1, #1
 8000446:	69b8      	ldr	r0, [r7, #24]
 8000448:	f7ff ff44 	bl	80002d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08e      	sub	sp, #56	; 0x38
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000462:	2300      	movs	r3, #0
 8000464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800046c:	2b00      	cmp	r3, #0
 800046e:	d109      	bne.n	8000484 <xQueueGenericSend+0x30>
 8000470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000474:	f383 8811 	msr	BASEPRI, r3
 8000478:	f3bf 8f6f 	isb	sy
 800047c:	f3bf 8f4f 	dsb	sy
 8000480:	62bb      	str	r3, [r7, #40]	; 0x28
 8000482:	e7fe      	b.n	8000482 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d103      	bne.n	8000492 <xQueueGenericSend+0x3e>
 800048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800048c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <xQueueGenericSend+0x42>
 8000492:	2301      	movs	r3, #1
 8000494:	e000      	b.n	8000498 <xQueueGenericSend+0x44>
 8000496:	2300      	movs	r3, #0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d109      	bne.n	80004b0 <xQueueGenericSend+0x5c>
 800049c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004a0:	f383 8811 	msr	BASEPRI, r3
 80004a4:	f3bf 8f6f 	isb	sy
 80004a8:	f3bf 8f4f 	dsb	sy
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
 80004ae:	e7fe      	b.n	80004ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d103      	bne.n	80004be <xQueueGenericSend+0x6a>
 80004b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d101      	bne.n	80004c2 <xQueueGenericSend+0x6e>
 80004be:	2301      	movs	r3, #1
 80004c0:	e000      	b.n	80004c4 <xQueueGenericSend+0x70>
 80004c2:	2300      	movs	r3, #0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d109      	bne.n	80004dc <xQueueGenericSend+0x88>
 80004c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004cc:	f383 8811 	msr	BASEPRI, r3
 80004d0:	f3bf 8f6f 	isb	sy
 80004d4:	f3bf 8f4f 	dsb	sy
 80004d8:	623b      	str	r3, [r7, #32]
 80004da:	e7fe      	b.n	80004da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80004dc:	f001 f908 	bl	80016f0 <xTaskGetSchedulerState>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d102      	bne.n	80004ec <xQueueGenericSend+0x98>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d101      	bne.n	80004f0 <xQueueGenericSend+0x9c>
 80004ec:	2301      	movs	r3, #1
 80004ee:	e000      	b.n	80004f2 <xQueueGenericSend+0x9e>
 80004f0:	2300      	movs	r3, #0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d109      	bne.n	800050a <xQueueGenericSend+0xb6>
 80004f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004fa:	f383 8811 	msr	BASEPRI, r3
 80004fe:	f3bf 8f6f 	isb	sy
 8000502:	f3bf 8f4f 	dsb	sy
 8000506:	61fb      	str	r3, [r7, #28]
 8000508:	e7fe      	b.n	8000508 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800050a:	f001 fc1d 	bl	8001d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	429a      	cmp	r2, r3
 8000518:	d302      	bcc.n	8000520 <xQueueGenericSend+0xcc>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	2b02      	cmp	r3, #2
 800051e:	d129      	bne.n	8000574 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	68b9      	ldr	r1, [r7, #8]
 8000524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000526:	f000 f9ae 	bl	8000886 <prvCopyDataToQueue>
 800052a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800052c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000530:	2b00      	cmp	r3, #0
 8000532:	d010      	beq.n	8000556 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000536:	3324      	adds	r3, #36	; 0x24
 8000538:	4618      	mov	r0, r3
 800053a:	f000 ff3d 	bl	80013b8 <xTaskRemoveFromEventList>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d013      	beq.n	800056c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000544:	4b3f      	ldr	r3, [pc, #252]	; (8000644 <xQueueGenericSend+0x1f0>)
 8000546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	f3bf 8f4f 	dsb	sy
 8000550:	f3bf 8f6f 	isb	sy
 8000554:	e00a      	b.n	800056c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000558:	2b00      	cmp	r3, #0
 800055a:	d007      	beq.n	800056c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800055c:	4b39      	ldr	r3, [pc, #228]	; (8000644 <xQueueGenericSend+0x1f0>)
 800055e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800056c:	f001 fc1a 	bl	8001da4 <vPortExitCritical>
				return pdPASS;
 8000570:	2301      	movs	r3, #1
 8000572:	e063      	b.n	800063c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d103      	bne.n	8000582 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800057a:	f001 fc13 	bl	8001da4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800057e:	2300      	movs	r3, #0
 8000580:	e05c      	b.n	800063c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000584:	2b00      	cmp	r3, #0
 8000586:	d106      	bne.n	8000596 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ff75 	bl	800147c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000592:	2301      	movs	r3, #1
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000596:	f001 fc05 	bl	8001da4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800059a:	f000 fd29 	bl	8000ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800059e:	f001 fbd3 	bl	8001d48 <vPortEnterCritical>
 80005a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005ae:	d103      	bne.n	80005b8 <xQueueGenericSend+0x164>
 80005b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80005b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d103      	bne.n	80005ce <xQueueGenericSend+0x17a>
 80005c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c8:	2200      	movs	r2, #0
 80005ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80005ce:	f001 fbe9 	bl	8001da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80005d2:	1d3a      	adds	r2, r7, #4
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	4611      	mov	r1, r2
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 ff64 	bl	80014a8 <xTaskCheckForTimeOut>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d124      	bne.n	8000630 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80005e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80005e8:	f000 fa1f 	bl	8000a2a <prvIsQueueFull>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d018      	beq.n	8000624 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80005f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f4:	3310      	adds	r3, #16
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4611      	mov	r1, r2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 feb8 	bl	8001370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000602:	f000 f9aa 	bl	800095a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000606:	f000 fd01 	bl	800100c <xTaskResumeAll>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	f47f af7c 	bne.w	800050a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <xQueueGenericSend+0x1f0>)
 8000614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	e772      	b.n	800050a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000626:	f000 f998 	bl	800095a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800062a:	f000 fcef 	bl	800100c <xTaskResumeAll>
 800062e:	e76c      	b.n	800050a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000632:	f000 f992 	bl	800095a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000636:	f000 fce9 	bl	800100c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800063a:	2300      	movs	r3, #0
		}
	}
}
 800063c:	4618      	mov	r0, r3
 800063e:	3738      	adds	r7, #56	; 0x38
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	e000ed04 	.word	0xe000ed04

08000648 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000652:	2300      	movs	r3, #0
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800065a:	2300      	movs	r3, #0
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	2b00      	cmp	r3, #0
 8000662:	d109      	bne.n	8000678 <xQueueSemaphoreTake+0x30>
 8000664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000668:	f383 8811 	msr	BASEPRI, r3
 800066c:	f3bf 8f6f 	isb	sy
 8000670:	f3bf 8f4f 	dsb	sy
 8000674:	623b      	str	r3, [r7, #32]
 8000676:	e7fe      	b.n	8000676 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	2b00      	cmp	r3, #0
 800067e:	d009      	beq.n	8000694 <xQueueSemaphoreTake+0x4c>
 8000680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000684:	f383 8811 	msr	BASEPRI, r3
 8000688:	f3bf 8f6f 	isb	sy
 800068c:	f3bf 8f4f 	dsb	sy
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	e7fe      	b.n	8000692 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000694:	f001 f82c 	bl	80016f0 <xTaskGetSchedulerState>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d102      	bne.n	80006a4 <xQueueSemaphoreTake+0x5c>
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <xQueueSemaphoreTake+0x60>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <xQueueSemaphoreTake+0x62>
 80006a8:	2300      	movs	r3, #0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d109      	bne.n	80006c2 <xQueueSemaphoreTake+0x7a>
 80006ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b2:	f383 8811 	msr	BASEPRI, r3
 80006b6:	f3bf 8f6f 	isb	sy
 80006ba:	f3bf 8f4f 	dsb	sy
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	e7fe      	b.n	80006c0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80006c2:	f001 fb41 	bl	8001d48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80006c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80006cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d024      	beq.n	800071c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80006d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80006da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d104      	bne.n	80006ec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80006e2:	f001 f9cb 	bl	8001a7c <pvTaskIncrementMutexHeldCount>
 80006e6:	4602      	mov	r2, r0
 80006e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ea:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00f      	beq.n	8000714 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f6:	3310      	adds	r3, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 fe5d 	bl	80013b8 <xTaskRemoveFromEventList>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000704:	4b53      	ldr	r3, [pc, #332]	; (8000854 <xQueueSemaphoreTake+0x20c>)
 8000706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	f3bf 8f4f 	dsb	sy
 8000710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000714:	f001 fb46 	bl	8001da4 <vPortExitCritical>
				return pdPASS;
 8000718:	2301      	movs	r3, #1
 800071a:	e096      	b.n	800084a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d110      	bne.n	8000744 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8000722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000724:	2b00      	cmp	r3, #0
 8000726:	d009      	beq.n	800073c <xQueueSemaphoreTake+0xf4>
 8000728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072c:	f383 8811 	msr	BASEPRI, r3
 8000730:	f3bf 8f6f 	isb	sy
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	e7fe      	b.n	800073a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800073c:	f001 fb32 	bl	8001da4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000740:	2300      	movs	r3, #0
 8000742:	e082      	b.n	800084a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000746:	2b00      	cmp	r3, #0
 8000748:	d106      	bne.n	8000758 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fe94 	bl	800147c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000754:	2301      	movs	r3, #1
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000758:	f001 fb24 	bl	8001da4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800075c:	f000 fc48 	bl	8000ff0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000760:	f001 faf2 	bl	8001d48 <vPortEnterCritical>
 8000764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000770:	d103      	bne.n	800077a <xQueueSemaphoreTake+0x132>
 8000772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000780:	b25b      	sxtb	r3, r3
 8000782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000786:	d103      	bne.n	8000790 <xQueueSemaphoreTake+0x148>
 8000788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000790:	f001 fb08 	bl	8001da4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000794:	463a      	mov	r2, r7
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fe83 	bl	80014a8 <xTaskCheckForTimeOut>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d132      	bne.n	800080e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80007aa:	f000 f928 	bl	80009fe <prvIsQueueEmpty>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d026      	beq.n	8000802 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80007b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d109      	bne.n	80007d0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80007bc:	f001 fac4 	bl	8001d48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ffb1 	bl	800172c <xTaskPriorityInherit>
 80007ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80007cc:	f001 faea 	bl	8001da4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80007d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d2:	3324      	adds	r3, #36	; 0x24
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fdc9 	bl	8001370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80007de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80007e0:	f000 f8bb 	bl	800095a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80007e4:	f000 fc12 	bl	800100c <xTaskResumeAll>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f47f af69 	bne.w	80006c2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <xQueueSemaphoreTake+0x20c>)
 80007f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	f3bf 8f4f 	dsb	sy
 80007fc:	f3bf 8f6f 	isb	sy
 8000800:	e75f      	b.n	80006c2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8000802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000804:	f000 f8a9 	bl	800095a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000808:	f000 fc00 	bl	800100c <xTaskResumeAll>
 800080c:	e759      	b.n	80006c2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800080e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000810:	f000 f8a3 	bl	800095a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000814:	f000 fbfa 	bl	800100c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800081a:	f000 f8f0 	bl	80009fe <prvIsQueueEmpty>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	f43f af4e 	beq.w	80006c2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8000826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00d      	beq.n	8000848 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800082c:	f001 fa8c 	bl	8001d48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000832:	f000 f811 	bl	8000858 <prvGetDisinheritPriorityAfterTimeout>
 8000836:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8000838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f87e 	bl	8001940 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8000844:	f001 faae 	bl	8001da4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800084a:	4618      	mov	r0, r3
 800084c:	3738      	adds	r7, #56	; 0x38
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000ed04 	.word	0xe000ed04

08000858 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000864:	2b00      	cmp	r3, #0
 8000866:	d006      	beq.n	8000876 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f1c3 0304 	rsb	r3, r3, #4
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e001      	b.n	800087a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800087a:	68fb      	ldr	r3, [r7, #12]
	}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800089a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10d      	bne.n	80008c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d14d      	bne.n	8000948 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 ffc1 	bl	8001838 <xTaskPriorityDisinherit>
 80008b6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	e043      	b.n	8000948 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d119      	bne.n	80008fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6898      	ldr	r0, [r3, #8]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	461a      	mov	r2, r3
 80008d0:	68b9      	ldr	r1, [r7, #8]
 80008d2:	f002 fddf 	bl	8003494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	441a      	add	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d32b      	bcc.n	8000948 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	e026      	b.n	8000948 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	68d8      	ldr	r0, [r3, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	461a      	mov	r2, r3
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	f002 fdc5 	bl	8003494 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	68da      	ldr	r2, [r3, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	425b      	negs	r3, r3
 8000914:	441a      	add	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d207      	bcs.n	8000936 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	425b      	negs	r3, r3
 8000930:	441a      	add	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d105      	bne.n	8000948 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d002      	beq.n	8000948 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	3b01      	subs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000950:	697b      	ldr	r3, [r7, #20]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000962:	f001 f9f1 	bl	8001d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800096c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800096e:	e011      	b.n	8000994 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000974:	2b00      	cmp	r3, #0
 8000976:	d012      	beq.n	800099e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3324      	adds	r3, #36	; 0x24
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fd1b 	bl	80013b8 <xTaskRemoveFromEventList>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000988:	f000 fdee 	bl	8001568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	3b01      	subs	r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000998:	2b00      	cmp	r3, #0
 800099a:	dce9      	bgt.n	8000970 <prvUnlockQueue+0x16>
 800099c:	e000      	b.n	80009a0 <prvUnlockQueue+0x46>
					break;
 800099e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	22ff      	movs	r2, #255	; 0xff
 80009a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80009a8:	f001 f9fc 	bl	8001da4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80009ac:	f001 f9cc 	bl	8001d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80009b8:	e011      	b.n	80009de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d012      	beq.n	80009e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3310      	adds	r3, #16
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fcf6 	bl	80013b8 <xTaskRemoveFromEventList>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80009d2:	f000 fdc9 	bl	8001568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80009d6:	7bbb      	ldrb	r3, [r7, #14]
 80009d8:	3b01      	subs	r3, #1
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80009de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	dce9      	bgt.n	80009ba <prvUnlockQueue+0x60>
 80009e6:	e000      	b.n	80009ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80009e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80009f2:	f001 f9d7 	bl	8001da4 <vPortExitCritical>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000a06:	f001 f99f 	bl	8001d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	e001      	b.n	8000a1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000a1c:	f001 f9c2 	bl	8001da4 <vPortExitCritical>

	return xReturn;
 8000a20:	68fb      	ldr	r3, [r7, #12]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b084      	sub	sp, #16
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000a32:	f001 f989 	bl	8001d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d102      	bne.n	8000a48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000a42:	2301      	movs	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	e001      	b.n	8000a4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000a4c:	f001 f9aa 	bl	8001da4 <vPortExitCritical>

	return xReturn;
 8000a50:	68fb      	ldr	r3, [r7, #12]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b08c      	sub	sp, #48	; 0x30
 8000a5e:	af04      	add	r7, sp, #16
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fa28 	bl	8001ec4 <pvPortMalloc>
 8000a74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00e      	beq.n	8000a9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000a7c:	2054      	movs	r0, #84	; 0x54
 8000a7e:	f001 fa21 	bl	8001ec4 <pvPortMalloc>
 8000a82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a90:	e005      	b.n	8000a9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f001 fad8 	bl	8002048 <vPortFree>
 8000a98:	e001      	b.n	8000a9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000aa4:	88fa      	ldrh	r2, [r7, #6]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9303      	str	r3, [sp, #12]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	9302      	str	r3, [sp, #8]
 8000aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f80e 	bl	8000adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000ac0:	69f8      	ldr	r0, [r7, #28]
 8000ac2:	f000 f889 	bl	8000bd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	e002      	b.n	8000ad2 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000af4:	3b01      	subs	r3, #1
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	f023 0307 	bic.w	r3, r3, #7
 8000b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d009      	beq.n	8000b22 <prvInitialiseNewTask+0x46>
 8000b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b12:	f383 8811 	msr	BASEPRI, r3
 8000b16:	f3bf 8f6f 	isb	sy
 8000b1a:	f3bf 8f4f 	dsb	sy
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e7fe      	b.n	8000b20 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
 8000b26:	e012      	b.n	8000b4e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	7819      	ldrb	r1, [r3, #0]
 8000b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	4413      	add	r3, r2
 8000b36:	3334      	adds	r3, #52	; 0x34
 8000b38:	460a      	mov	r2, r1
 8000b3a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d9e9      	bls.n	8000b28 <prvInitialiseNewTask+0x4c>
 8000b54:	e000      	b.n	8000b58 <prvInitialiseNewTask+0x7c>
		{
			break;
 8000b56:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d901      	bls.n	8000b6a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000b66:	2303      	movs	r3, #3
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b74:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8000b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b78:	2200      	movs	r2, #0
 8000b7a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7e:	3304      	adds	r3, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fb16 	bl	80001b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b88:	3318      	adds	r3, #24
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fb11 	bl	80001b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b94:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b98:	f1c3 0204 	rsb	r2, r3, #4
 8000b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba8:	2200      	movs	r2, #0
 8000baa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	69b8      	ldr	r0, [r7, #24]
 8000bba:	f000 ffd9 	bl	8001b70 <pxPortInitialiseStack>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000be0:	f001 f8b2 	bl	8001d48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <prvAddNewTaskToReadyList+0xb8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a29      	ldr	r2, [pc, #164]	; (8000c90 <prvAddNewTaskToReadyList+0xb8>)
 8000bec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <prvAddNewTaskToReadyList+0xbc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d109      	bne.n	8000c0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000bf6:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <prvAddNewTaskToReadyList+0xbc>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000bfc:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <prvAddNewTaskToReadyList+0xb8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d110      	bne.n	8000c26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000c04:	f000 fcd4 	bl	80015b0 <prvInitialiseTaskLists>
 8000c08:	e00d      	b.n	8000c26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <prvAddNewTaskToReadyList+0xc0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d109      	bne.n	8000c26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <prvAddNewTaskToReadyList+0xbc>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d802      	bhi.n	8000c26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <prvAddNewTaskToReadyList+0xbc>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <prvAddNewTaskToReadyList+0xc4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <prvAddNewTaskToReadyList+0xc4>)
 8000c2e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	2201      	movs	r2, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <prvAddNewTaskToReadyList+0xc8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <prvAddNewTaskToReadyList+0xc8>)
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <prvAddNewTaskToReadyList+0xcc>)
 8000c50:	441a      	add	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	3304      	adds	r3, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4610      	mov	r0, r2
 8000c5a:	f7ff fab6 	bl	80001ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000c5e:	f001 f8a1 	bl	8001da4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <prvAddNewTaskToReadyList+0xc0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00e      	beq.n	8000c88 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <prvAddNewTaskToReadyList+0xbc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <prvAddNewTaskToReadyList+0xd0>)
 8000c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	f3bf 8f4f 	dsb	sy
 8000c84:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000178 	.word	0x20000178
 8000c94:	200000b4 	.word	0x200000b4
 8000c98:	20000184 	.word	0x20000184
 8000c9c:	20000194 	.word	0x20000194
 8000ca0:	20000180 	.word	0x20000180
 8000ca4:	200000b8 	.word	0x200000b8
 8000ca8:	e000ed04 	.word	0xe000ed04

08000cac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d016      	beq.n	8000cec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <vTaskDelay+0x60>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d009      	beq.n	8000cda <vTaskDelay+0x2e>
 8000cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cca:	f383 8811 	msr	BASEPRI, r3
 8000cce:	f3bf 8f6f 	isb	sy
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	e7fe      	b.n	8000cd8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000cda:	f000 f989 	bl	8000ff0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000cde:	2100      	movs	r1, #0
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 fedf 	bl	8001aa4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000ce6:	f000 f991 	bl	800100c <xTaskResumeAll>
 8000cea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <vTaskDelay+0x64>)
 8000cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	f3bf 8f4f 	dsb	sy
 8000cfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	200001a0 	.word	0x200001a0
 8000d10:	e000ed04 	.word	0xe000ed04

08000d14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8000d1c:	f001 f814 	bl	8001d48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <vTaskSuspend+0x18>
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <vTaskSuspend+0x104>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	e000      	b.n	8000d2e <vTaskSuspend+0x1a>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3304      	adds	r3, #4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff faa3 	bl	8000280 <uxListRemove>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d115      	bne.n	8000d6c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d44:	4935      	ldr	r1, [pc, #212]	; (8000e1c <vTaskSuspend+0x108>)
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10a      	bne.n	8000d6c <vTaskSuspend+0x58>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43da      	mvns	r2, r3
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <vTaskSuspend+0x10c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4013      	ands	r3, r2
 8000d68:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <vTaskSuspend+0x10c>)
 8000d6a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d004      	beq.n	8000d7e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3318      	adds	r3, #24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fa81 	bl	8000280 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3304      	adds	r3, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4827      	ldr	r0, [pc, #156]	; (8000e24 <vTaskSuspend+0x110>)
 8000d86:	f7ff fa20 	bl	80001ca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d103      	bne.n	8000d9e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8000d9e:	f001 f801 	bl	8001da4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <vTaskSuspend+0x114>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8000daa:	f000 ffcd 	bl	8001d48 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8000dae:	f000 fc7b 	bl	80016a8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8000db2:	f000 fff7 	bl	8001da4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <vTaskSuspend+0x104>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d126      	bne.n	8000e0e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <vTaskSuspend+0x114>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d016      	beq.n	8000df6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <vTaskSuspend+0x118>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d009      	beq.n	8000de4 <vTaskSuspend+0xd0>
 8000dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd4:	f383 8811 	msr	BASEPRI, r3
 8000dd8:	f3bf 8f6f 	isb	sy
 8000ddc:	f3bf 8f4f 	dsb	sy
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	e7fe      	b.n	8000de2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <vTaskSuspend+0x11c>)
 8000de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000df4:	e00b      	b.n	8000e0e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <vTaskSuspend+0x110>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <vTaskSuspend+0x120>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d103      	bne.n	8000e0a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <vTaskSuspend+0x104>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
	}
 8000e08:	e001      	b.n	8000e0e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8000e0a:	f000 fa57 	bl	80012bc <vTaskSwitchContext>
	}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000b4 	.word	0x200000b4
 8000e1c:	200000b8 	.word	0x200000b8
 8000e20:	20000180 	.word	0x20000180
 8000e24:	20000164 	.word	0x20000164
 8000e28:	20000184 	.word	0x20000184
 8000e2c:	200001a0 	.word	0x200001a0
 8000e30:	e000ed04 	.word	0xe000ed04
 8000e34:	20000178 	.word	0x20000178

08000e38 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d109      	bne.n	8000e62 <prvTaskIsTaskSuspended+0x2a>
 8000e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e52:	f383 8811 	msr	BASEPRI, r3
 8000e56:	f3bf 8f6f 	isb	sy
 8000e5a:	f3bf 8f4f 	dsb	sy
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e7fe      	b.n	8000e60 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <prvTaskIsTaskSuspended+0x6c>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d101      	bne.n	8000e70 <prvTaskIsTaskSuspended+0x38>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <prvTaskIsTaskSuspended+0x3a>
 8000e70:	2300      	movs	r3, #0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00f      	beq.n	8000e96 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <prvTaskIsTaskSuspended+0x70>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d00a      	beq.n	8000e96 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <prvTaskIsTaskSuspended+0x54>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <prvTaskIsTaskSuspended+0x56>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8000e96:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8000e98:	4618      	mov	r0, r3
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000164 	.word	0x20000164
 8000ea8:	20000138 	.word	0x20000138

08000eac <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <vTaskResume+0x26>
 8000ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	e7fe      	b.n	8000ed0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d039      	beq.n	8000f4c <vTaskResume+0xa0>
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <vTaskResume+0xa8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d034      	beq.n	8000f4c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8000ee2:	f000 ff31 	bl	8001d48 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f7ff ffa6 	bl	8000e38 <prvTaskIsTaskSuspended>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d02a      	beq.n	8000f48 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff f9c2 	bl	8000280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	2201      	movs	r2, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <vTaskResume+0xac>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <vTaskResume+0xac>)
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4a10      	ldr	r2, [pc, #64]	; (8000f5c <vTaskResume+0xb0>)
 8000f1c:	441a      	add	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3304      	adds	r3, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4610      	mov	r0, r2
 8000f26:	f7ff f950 	bl	80001ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <vTaskResume+0xa8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d307      	bcc.n	8000f48 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <vTaskResume+0xb4>)
 8000f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000f48:	f000 ff2c 	bl	8001da4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000b4 	.word	0x200000b4
 8000f58:	20000180 	.word	0x20000180
 8000f5c:	200000b8 	.word	0x200000b8
 8000f60:	e000ed04 	.word	0xe000ed04

08000f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <vTaskStartScheduler+0x74>)
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2300      	movs	r3, #0
 8000f74:	2220      	movs	r2, #32
 8000f76:	4919      	ldr	r1, [pc, #100]	; (8000fdc <vTaskStartScheduler+0x78>)
 8000f78:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <vTaskStartScheduler+0x7c>)
 8000f7a:	f7ff fd6e 	bl	8000a5a <xTaskCreate>
 8000f7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d115      	bne.n	8000fb2 <vTaskStartScheduler+0x4e>
 8000f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f8a:	f383 8811 	msr	BASEPRI, r3
 8000f8e:	f3bf 8f6f 	isb	sy
 8000f92:	f3bf 8f4f 	dsb	sy
 8000f96:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <vTaskStartScheduler+0x80>)
 8000f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <vTaskStartScheduler+0x84>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <vTaskStartScheduler+0x88>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000fac:	f000 fe5c 	bl	8001c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000fb0:	e00d      	b.n	8000fce <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fb8:	d109      	bne.n	8000fce <vTaskStartScheduler+0x6a>
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	e7fe      	b.n	8000fcc <vTaskStartScheduler+0x68>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000019c 	.word	0x2000019c
 8000fdc:	08003d34 	.word	0x08003d34
 8000fe0:	08001581 	.word	0x08001581
 8000fe4:	20000198 	.word	0x20000198
 8000fe8:	20000184 	.word	0x20000184
 8000fec:	2000017c 	.word	0x2000017c

08000ff0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <vTaskSuspendAll+0x18>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a03      	ldr	r2, [pc, #12]	; (8001008 <vTaskSuspendAll+0x18>)
 8000ffc:	6013      	str	r3, [r2, #0]
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200001a0 	.word	0x200001a0

0800100c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <xTaskResumeAll+0x114>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d109      	bne.n	8001036 <xTaskResumeAll+0x2a>
 8001022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001026:	f383 8811 	msr	BASEPRI, r3
 800102a:	f3bf 8f6f 	isb	sy
 800102e:	f3bf 8f4f 	dsb	sy
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	e7fe      	b.n	8001034 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001036:	f000 fe87 	bl	8001d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <xTaskResumeAll+0x114>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3b01      	subs	r3, #1
 8001040:	4a37      	ldr	r2, [pc, #220]	; (8001120 <xTaskResumeAll+0x114>)
 8001042:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <xTaskResumeAll+0x114>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d161      	bne.n	8001110 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800104c:	4b35      	ldr	r3, [pc, #212]	; (8001124 <xTaskResumeAll+0x118>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d05d      	beq.n	8001110 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001054:	e02e      	b.n	80010b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <xTaskResumeAll+0x11c>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3318      	adds	r3, #24
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f90c 	bl	8000280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3304      	adds	r3, #4
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f907 	bl	8000280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	2201      	movs	r2, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <xTaskResumeAll+0x120>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4313      	orrs	r3, r2
 8001080:	4a2a      	ldr	r2, [pc, #168]	; (800112c <xTaskResumeAll+0x120>)
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <xTaskResumeAll+0x124>)
 8001092:	441a      	add	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3304      	adds	r3, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4610      	mov	r0, r2
 800109c:	f7ff f895 	bl	80001ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <xTaskResumeAll+0x128>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d302      	bcc.n	80010b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <xTaskResumeAll+0x12c>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <xTaskResumeAll+0x11c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1cc      	bne.n	8001056 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80010c2:	f000 faf1 	bl	80016a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <xTaskResumeAll+0x130>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d010      	beq.n	80010f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80010d2:	f000 f837 	bl	8001144 <xTaskIncrementTick>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <xTaskResumeAll+0x12c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f1      	bne.n	80010d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <xTaskResumeAll+0x130>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <xTaskResumeAll+0x12c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d009      	beq.n	8001110 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <xTaskResumeAll+0x134>)
 8001102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	f3bf 8f4f 	dsb	sy
 800110c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001110:	f000 fe48 	bl	8001da4 <vPortExitCritical>

	return xAlreadyYielded;
 8001114:	68bb      	ldr	r3, [r7, #8]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001a0 	.word	0x200001a0
 8001124:	20000178 	.word	0x20000178
 8001128:	20000138 	.word	0x20000138
 800112c:	20000180 	.word	0x20000180
 8001130:	200000b8 	.word	0x200000b8
 8001134:	200000b4 	.word	0x200000b4
 8001138:	2000018c 	.word	0x2000018c
 800113c:	20000188 	.word	0x20000188
 8001140:	e000ed04 	.word	0xe000ed04

08001144 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800114e:	4b50      	ldr	r3, [pc, #320]	; (8001290 <xTaskIncrementTick+0x14c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 808c 	bne.w	8001270 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001158:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <xTaskIncrementTick+0x150>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001160:	4a4c      	ldr	r2, [pc, #304]	; (8001294 <xTaskIncrementTick+0x150>)
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d11f      	bne.n	80011ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800116c:	4b4a      	ldr	r3, [pc, #296]	; (8001298 <xTaskIncrementTick+0x154>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <xTaskIncrementTick+0x46>
 8001176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	e7fe      	b.n	8001188 <xTaskIncrementTick+0x44>
 800118a:	4b43      	ldr	r3, [pc, #268]	; (8001298 <xTaskIncrementTick+0x154>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b42      	ldr	r3, [pc, #264]	; (800129c <xTaskIncrementTick+0x158>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a40      	ldr	r2, [pc, #256]	; (8001298 <xTaskIncrementTick+0x154>)
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4a40      	ldr	r2, [pc, #256]	; (800129c <xTaskIncrementTick+0x158>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <xTaskIncrementTick+0x15c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a3e      	ldr	r2, [pc, #248]	; (80012a0 <xTaskIncrementTick+0x15c>)
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	f000 fa7e 	bl	80016a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80011ac:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <xTaskIncrementTick+0x160>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d34d      	bcc.n	8001252 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <xTaskIncrementTick+0x154>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <xTaskIncrementTick+0x80>
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <xTaskIncrementTick+0x82>
 80011c4:	2300      	movs	r3, #0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <xTaskIncrementTick+0x160>)
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d0:	601a      	str	r2, [r3, #0]
					break;
 80011d2:	e03e      	b.n	8001252 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <xTaskIncrementTick+0x154>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d203      	bcs.n	80011f4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80011ec:	4a2d      	ldr	r2, [pc, #180]	; (80012a4 <xTaskIncrementTick+0x160>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
						break;
 80011f2:	e02e      	b.n	8001252 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3304      	adds	r3, #4
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f841 	bl	8000280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3318      	adds	r3, #24
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f838 	bl	8000280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2201      	movs	r2, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <xTaskIncrementTick+0x164>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <xTaskIncrementTick+0x164>)
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <xTaskIncrementTick+0x168>)
 8001230:	441a      	add	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3304      	adds	r3, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f7fe ffc6 	bl	80001ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <xTaskIncrementTick+0x16c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	429a      	cmp	r2, r3
 800124a:	d3b4      	bcc.n	80011b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800124c:	2301      	movs	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001250:	e7b1      	b.n	80011b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <xTaskIncrementTick+0x16c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001258:	4914      	ldr	r1, [pc, #80]	; (80012ac <xTaskIncrementTick+0x168>)
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d907      	bls.n	800127a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800126a:	2301      	movs	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e004      	b.n	800127a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <xTaskIncrementTick+0x170>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <xTaskIncrementTick+0x170>)
 8001278:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <xTaskIncrementTick+0x174>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001286:	697b      	ldr	r3, [r7, #20]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200001a0 	.word	0x200001a0
 8001294:	2000017c 	.word	0x2000017c
 8001298:	20000130 	.word	0x20000130
 800129c:	20000134 	.word	0x20000134
 80012a0:	20000190 	.word	0x20000190
 80012a4:	20000198 	.word	0x20000198
 80012a8:	20000180 	.word	0x20000180
 80012ac:	200000b8 	.word	0x200000b8
 80012b0:	200000b4 	.word	0x200000b4
 80012b4:	20000188 	.word	0x20000188
 80012b8:	2000018c 	.word	0x2000018c

080012bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <vTaskSwitchContext+0xa0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <vTaskSwitchContext+0xa4>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80012d0:	e03e      	b.n	8001350 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <vTaskSwitchContext+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <vTaskSwitchContext+0xa8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	fab3 f383 	clz	r3, r3
 80012e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	f1c3 031f 	rsb	r3, r3, #31
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	491e      	ldr	r1, [pc, #120]	; (8001368 <vTaskSwitchContext+0xac>)
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d109      	bne.n	8001316 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	e7fe      	b.n	8001314 <vTaskSwitchContext+0x58>
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4a11      	ldr	r2, [pc, #68]	; (8001368 <vTaskSwitchContext+0xac>)
 8001322:	4413      	add	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	3308      	adds	r3, #8
 8001338:	429a      	cmp	r2, r3
 800133a:	d104      	bne.n	8001346 <vTaskSwitchContext+0x8a>
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <vTaskSwitchContext+0xb0>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200001a0 	.word	0x200001a0
 8001360:	2000018c 	.word	0x2000018c
 8001364:	20000180 	.word	0x20000180
 8001368:	200000b8 	.word	0x200000b8
 800136c:	200000b4 	.word	0x200000b4

08001370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d109      	bne.n	8001394 <vTaskPlaceOnEventList+0x24>
 8001380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001384:	f383 8811 	msr	BASEPRI, r3
 8001388:	f3bf 8f6f 	isb	sy
 800138c:	f3bf 8f4f 	dsb	sy
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e7fe      	b.n	8001392 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <vTaskPlaceOnEventList+0x44>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3318      	adds	r3, #24
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7fe ff37 	bl	8000210 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80013a2:	2101      	movs	r1, #1
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f000 fb7d 	bl	8001aa4 <prvAddCurrentTaskToDelayedList>
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200000b4 	.word	0x200000b4

080013b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <xTaskRemoveFromEventList+0x2a>
 80013ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d2:	f383 8811 	msr	BASEPRI, r3
 80013d6:	f3bf 8f6f 	isb	sy
 80013da:	f3bf 8f4f 	dsb	sy
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e7fe      	b.n	80013e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	3318      	adds	r3, #24
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ff4a 	bl	8000280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80013ec:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <xTaskRemoveFromEventList+0xac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d11c      	bne.n	800142e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	3304      	adds	r3, #4
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff41 	bl	8000280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001402:	2201      	movs	r2, #1
 8001404:	409a      	lsls	r2, r3
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <xTaskRemoveFromEventList+0xb0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4313      	orrs	r3, r2
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <xTaskRemoveFromEventList+0xb0>)
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <xTaskRemoveFromEventList+0xb4>)
 800141e:	441a      	add	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	3304      	adds	r3, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f7fe fecf 	bl	80001ca <vListInsertEnd>
 800142c:	e005      	b.n	800143a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	3318      	adds	r3, #24
 8001432:	4619      	mov	r1, r3
 8001434:	480e      	ldr	r0, [pc, #56]	; (8001470 <xTaskRemoveFromEventList+0xb8>)
 8001436:	f7fe fec8 	bl	80001ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <xTaskRemoveFromEventList+0xbc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	429a      	cmp	r2, r3
 8001446:	d905      	bls.n	8001454 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001448:	2301      	movs	r3, #1
 800144a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <xTaskRemoveFromEventList+0xc0>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e001      	b.n	8001458 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001458:	697b      	ldr	r3, [r7, #20]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200001a0 	.word	0x200001a0
 8001468:	20000180 	.word	0x20000180
 800146c:	200000b8 	.word	0x200000b8
 8001470:	20000138 	.word	0x20000138
 8001474:	200000b4 	.word	0x200000b4
 8001478:	2000018c 	.word	0x2000018c

0800147c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <vTaskInternalSetTimeOutState+0x24>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <vTaskInternalSetTimeOutState+0x28>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	605a      	str	r2, [r3, #4]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000190 	.word	0x20000190
 80014a4:	2000017c 	.word	0x2000017c

080014a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <xTaskCheckForTimeOut+0x24>
 80014b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014bc:	f383 8811 	msr	BASEPRI, r3
 80014c0:	f3bf 8f6f 	isb	sy
 80014c4:	f3bf 8f4f 	dsb	sy
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	e7fe      	b.n	80014ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <xTaskCheckForTimeOut+0x3e>
 80014d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d6:	f383 8811 	msr	BASEPRI, r3
 80014da:	f3bf 8f6f 	isb	sy
 80014de:	f3bf 8f4f 	dsb	sy
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e7fe      	b.n	80014e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80014e6:	f000 fc2f 	bl	8001d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <xTaskCheckForTimeOut+0xb8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001502:	d102      	bne.n	800150a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	e023      	b.n	8001552 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <xTaskCheckForTimeOut+0xbc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d007      	beq.n	8001526 <xTaskCheckForTimeOut+0x7e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	429a      	cmp	r2, r3
 800151e:	d302      	bcc.n	8001526 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	e015      	b.n	8001552 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	d20b      	bcs.n	8001548 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad2      	subs	r2, r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff9d 	bl	800147c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e004      	b.n	8001552 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001552:	f000 fc27 	bl	8001da4 <vPortExitCritical>

	return xReturn;
 8001556:	69fb      	ldr	r3, [r7, #28]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2000017c 	.word	0x2000017c
 8001564:	20000190 	.word	0x20000190

08001568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <vTaskMissedYield+0x14>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	2000018c 	.word	0x2000018c

08001580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001588:	f000 f852 	bl	8001630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <prvIdleTask+0x28>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d9f9      	bls.n	8001588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <prvIdleTask+0x2c>)
 8001596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80015a4:	e7f0      	b.n	8001588 <prvIdleTask+0x8>
 80015a6:	bf00      	nop
 80015a8:	200000b8 	.word	0x200000b8
 80015ac:	e000ed04 	.word	0xe000ed04

080015b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	e00c      	b.n	80015d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <prvInitialiseTaskLists+0x60>)
 80015c8:	4413      	add	r3, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe fdd2 	bl	8000174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d9ef      	bls.n	80015bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <prvInitialiseTaskLists+0x64>)
 80015de:	f7fe fdc9 	bl	8000174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80015e2:	480d      	ldr	r0, [pc, #52]	; (8001618 <prvInitialiseTaskLists+0x68>)
 80015e4:	f7fe fdc6 	bl	8000174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <prvInitialiseTaskLists+0x6c>)
 80015ea:	f7fe fdc3 	bl	8000174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <prvInitialiseTaskLists+0x70>)
 80015f0:	f7fe fdc0 	bl	8000174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <prvInitialiseTaskLists+0x74>)
 80015f6:	f7fe fdbd 	bl	8000174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <prvInitialiseTaskLists+0x78>)
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <prvInitialiseTaskLists+0x64>)
 80015fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <prvInitialiseTaskLists+0x7c>)
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <prvInitialiseTaskLists+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200000b8 	.word	0x200000b8
 8001614:	20000108 	.word	0x20000108
 8001618:	2000011c 	.word	0x2000011c
 800161c:	20000138 	.word	0x20000138
 8001620:	2000014c 	.word	0x2000014c
 8001624:	20000164 	.word	0x20000164
 8001628:	20000130 	.word	0x20000130
 800162c:	20000134 	.word	0x20000134

08001630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001636:	e019      	b.n	800166c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001638:	f000 fb86 	bl	8001d48 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <prvCheckTasksWaitingTermination+0x4c>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3304      	adds	r3, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe fe19 	bl	8000280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <prvCheckTasksWaitingTermination+0x50>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3b01      	subs	r3, #1
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <prvCheckTasksWaitingTermination+0x50>)
 8001656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <prvCheckTasksWaitingTermination+0x54>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <prvCheckTasksWaitingTermination+0x54>)
 8001660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001662:	f000 fb9f 	bl	8001da4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f80e 	bl	8001688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <prvCheckTasksWaitingTermination+0x54>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e1      	bne.n	8001638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	2000014c 	.word	0x2000014c
 8001680:	20000178 	.word	0x20000178
 8001684:	20000160 	.word	0x20000160

08001688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fcd7 	bl	8002048 <vPortFree>
			vPortFree( pxTCB );
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fcd4 	bl	8002048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <prvResetNextTaskUnblockTime+0x40>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <prvResetNextTaskUnblockTime+0x14>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <prvResetNextTaskUnblockTime+0x16>
 80016bc:	2300      	movs	r3, #0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <prvResetNextTaskUnblockTime+0x44>)
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80016ca:	e008      	b.n	80016de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <prvResetNextTaskUnblockTime+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <prvResetNextTaskUnblockTime+0x44>)
 80016dc:	6013      	str	r3, [r2, #0]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000130 	.word	0x20000130
 80016ec:	20000198 	.word	0x20000198

080016f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <xTaskGetSchedulerState+0x34>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80016fe:	2301      	movs	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	e008      	b.n	8001716 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <xTaskGetSchedulerState+0x38>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d102      	bne.n	8001712 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800170c:	2302      	movs	r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	e001      	b.n	8001716 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001716:	687b      	ldr	r3, [r7, #4]
	}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000184 	.word	0x20000184
 8001728:	200001a0 	.word	0x200001a0

0800172c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d06e      	beq.n	8001820 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <xTaskPriorityInherit+0x100>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	429a      	cmp	r2, r3
 800174e:	d25e      	bcs.n	800180e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db06      	blt.n	8001766 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001758:	4b34      	ldr	r3, [pc, #208]	; (800182c <xTaskPriorityInherit+0x100>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f1c3 0204 	rsb	r2, r3, #4
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	6959      	ldr	r1, [r3, #20]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4a2e      	ldr	r2, [pc, #184]	; (8001830 <xTaskPriorityInherit+0x104>)
 8001778:	4413      	add	r3, r2
 800177a:	4299      	cmp	r1, r3
 800177c:	d101      	bne.n	8001782 <xTaskPriorityInherit+0x56>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <xTaskPriorityInherit+0x58>
 8001782:	2300      	movs	r3, #0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d03a      	beq.n	80017fe <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3304      	adds	r3, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fd77 	bl	8000280 <uxListRemove>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d115      	bne.n	80017c4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	4924      	ldr	r1, [pc, #144]	; (8001830 <xTaskPriorityInherit+0x104>)
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10a      	bne.n	80017c4 <xTaskPriorityInherit+0x98>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	2201      	movs	r2, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43da      	mvns	r2, r3
 80017ba:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <xTaskPriorityInherit+0x108>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4013      	ands	r3, r2
 80017c0:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <xTaskPriorityInherit+0x108>)
 80017c2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <xTaskPriorityInherit+0x100>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	2201      	movs	r2, #1
 80017d4:	409a      	lsls	r2, r3
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <xTaskPriorityInherit+0x108>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	4a15      	ldr	r2, [pc, #84]	; (8001834 <xTaskPriorityInherit+0x108>)
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4a10      	ldr	r2, [pc, #64]	; (8001830 <xTaskPriorityInherit+0x104>)
 80017ee:	441a      	add	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	3304      	adds	r3, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7fe fce7 	bl	80001ca <vListInsertEnd>
 80017fc:	e004      	b.n	8001808 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <xTaskPriorityInherit+0x100>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001808:	2301      	movs	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e008      	b.n	8001820 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <xTaskPriorityInherit+0x100>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	429a      	cmp	r2, r3
 800181a:	d201      	bcs.n	8001820 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800181c:	2301      	movs	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001820:	68fb      	ldr	r3, [r7, #12]
	}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200000b4 	.word	0x200000b4
 8001830:	200000b8 	.word	0x200000b8
 8001834:	20000180 	.word	0x20000180

08001838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06c      	beq.n	8001928 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800184e:	4b39      	ldr	r3, [pc, #228]	; (8001934 <xTaskPriorityDisinherit+0xfc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d009      	beq.n	800186c <xTaskPriorityDisinherit+0x34>
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e7fe      	b.n	800186a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	2b00      	cmp	r3, #0
 8001872:	d109      	bne.n	8001888 <xTaskPriorityDisinherit+0x50>
 8001874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001878:	f383 8811 	msr	BASEPRI, r3
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	e7fe      	b.n	8001886 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	429a      	cmp	r2, r3
 800189c:	d044      	beq.n	8001928 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d140      	bne.n	8001928 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	3304      	adds	r3, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fce8 	bl	8000280 <uxListRemove>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d115      	bne.n	80018e2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ba:	491f      	ldr	r1, [pc, #124]	; (8001938 <xTaskPriorityDisinherit+0x100>)
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <xTaskPriorityDisinherit+0xaa>
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	2201      	movs	r2, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <xTaskPriorityDisinherit+0x104>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4013      	ands	r3, r2
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <xTaskPriorityDisinherit+0x104>)
 80018e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ee:	f1c3 0204 	rsb	r2, r3, #4
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	2201      	movs	r2, #1
 80018fc:	409a      	lsls	r2, r3
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <xTaskPriorityDisinherit+0x104>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <xTaskPriorityDisinherit+0x104>)
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4a08      	ldr	r2, [pc, #32]	; (8001938 <xTaskPriorityDisinherit+0x100>)
 8001916:	441a      	add	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	3304      	adds	r3, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7fe fc53 	bl	80001ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001924:	2301      	movs	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001928:	697b      	ldr	r3, [r7, #20]
	}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200000b4 	.word	0x200000b4
 8001938:	200000b8 	.word	0x200000b8
 800193c:	20000180 	.word	0x20000180

08001940 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800194e:	2301      	movs	r3, #1
 8001950:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8086 	beq.w	8001a66 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8001962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001966:	f383 8811 	msr	BASEPRI, r3
 800196a:	f3bf 8f6f 	isb	sy
 800196e:	f3bf 8f4f 	dsb	sy
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e7fe      	b.n	8001974 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d902      	bls.n	8001986 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	e002      	b.n	800198c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	429a      	cmp	r2, r3
 8001994:	d067      	beq.n	8001a66 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	d162      	bne.n	8001a66 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d109      	bne.n	80019be <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80019aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ae:	f383 8811 	msr	BASEPRI, r3
 80019b2:	f3bf 8f6f 	isb	sy
 80019b6:	f3bf 8f4f 	dsb	sy
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	e7fe      	b.n	80019bc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db04      	blt.n	80019dc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f1c3 0204 	rsb	r2, r3, #4
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6959      	ldr	r1, [r3, #20]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80019ec:	4413      	add	r3, r2
 80019ee:	4299      	cmp	r1, r3
 80019f0:	d101      	bne.n	80019f6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80019f6:	2300      	movs	r3, #0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d034      	beq.n	8001a66 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	3304      	adds	r3, #4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fc3d 	bl	8000280 <uxListRemove>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d115      	bne.n	8001a38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a10:	4918      	ldr	r1, [pc, #96]	; (8001a74 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10a      	bne.n	8001a38 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	2201      	movs	r2, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4013      	ands	r3, r2
 8001a34:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8001a36:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8001a58:	441a      	add	r2, r3
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f7fe fbb2 	bl	80001ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200000b4 	.word	0x200000b4
 8001a74:	200000b8 	.word	0x200000b8
 8001a78:	20000180 	.word	0x20000180

08001a7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a8e:	3201      	adds	r2, #1
 8001a90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8001a92:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <pvTaskIncrementMutexHeldCount+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
	}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200000b4 	.word	0x200000b4

08001aa4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fbe0 	bl	8000280 <uxListRemove>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10b      	bne.n	8001ade <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	2201      	movs	r2, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8001adc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ae4:	d10a      	bne.n	8001afc <prvAddCurrentTaskToDelayedList+0x58>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3304      	adds	r3, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	481a      	ldr	r0, [pc, #104]	; (8001b60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001af6:	f7fe fb68 	bl	80001ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001afa:	e026      	b.n	8001b4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d209      	bcs.n	8001b28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7fe fb75 	bl	8000210 <vListInsert>
}
 8001b26:	e010      	b.n	8001b4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3304      	adds	r3, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4610      	mov	r0, r2
 8001b36:	f7fe fb6b 	bl	8000210 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d202      	bcs.n	8001b4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	6013      	str	r3, [r2, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000017c 	.word	0x2000017c
 8001b58:	200000b4 	.word	0x200000b4
 8001b5c:	20000180 	.word	0x20000180
 8001b60:	20000164 	.word	0x20000164
 8001b64:	20000134 	.word	0x20000134
 8001b68:	20000130 	.word	0x20000130
 8001b6c:	20000198 	.word	0x20000198

08001b70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3b04      	subs	r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f023 0201 	bic.w	r2, r3, #1
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b04      	subs	r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001ba0:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <pxPortInitialiseStack+0x54>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3b14      	subs	r3, #20
 8001baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3b20      	subs	r3, #32
 8001bb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	08001bc9 	.word	0x08001bc9

08001bc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <prvTaskExitError+0x4c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bda:	d009      	beq.n	8001bf0 <prvTaskExitError+0x28>
 8001bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be0:	f383 8811 	msr	BASEPRI, r3
 8001be4:	f3bf 8f6f 	isb	sy
 8001be8:	f3bf 8f4f 	dsb	sy
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e7fe      	b.n	8001bee <prvTaskExitError+0x26>
 8001bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001c02:	bf00      	nop
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0fc      	beq.n	8001c04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	20000004 	.word	0x20000004
	...

08001c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <pxCurrentTCBConst2>)
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	6808      	ldr	r0, [r1, #0]
 8001c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c2a:	f380 8809 	msr	PSP, r0
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f380 8811 	msr	BASEPRI, r0
 8001c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8001c3e:	4770      	bx	lr

08001c40 <pxCurrentTCBConst2>:
 8001c40:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop

08001c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001c48:	4806      	ldr	r0, [pc, #24]	; (8001c64 <prvPortStartFirstTask+0x1c>)
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	6800      	ldr	r0, [r0, #0]
 8001c4e:	f380 8808 	msr	MSP, r0
 8001c52:	b662      	cpsie	i
 8001c54:	b661      	cpsie	f
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	f3bf 8f6f 	isb	sy
 8001c5e:	df00      	svc	0
 8001c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001c62:	bf00      	nop
 8001c64:	e000ed08 	.word	0xe000ed08

08001c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <xPortStartScheduler+0xcc>)
 8001c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	22ff      	movs	r2, #255	; 0xff
 8001c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <xPortStartScheduler+0xd0>)
 8001c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001c96:	4b29      	ldr	r3, [pc, #164]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001c9c:	e009      	b.n	8001cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cba:	2b80      	cmp	r3, #128	; 0x80
 8001cbc:	d0ef      	beq.n	8001c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d009      	beq.n	8001cde <xPortStartScheduler+0x76>
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	e7fe      	b.n	8001cdc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cf0:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <xPortStartScheduler+0xd4>)
 8001cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <xPortStartScheduler+0xd8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <xPortStartScheduler+0xd8>)
 8001d02:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <xPortStartScheduler+0xd8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <xPortStartScheduler+0xd8>)
 8001d0e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001d14:	f000 f8b0 	bl	8001e78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <xPortStartScheduler+0xdc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001d1e:	f7ff ff93 	bl	8001c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001d22:	f7ff facb 	bl	80012bc <vTaskSwitchContext>
	prvTaskExitError();
 8001d26:	f7ff ff4f 	bl	8001bc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	e000e400 	.word	0xe000e400
 8001d38:	200001a4 	.word	0x200001a4
 8001d3c:	200001a8 	.word	0x200001a8
 8001d40:	e000ed20 	.word	0xe000ed20
 8001d44:	20000004 	.word	0x20000004

08001d48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d52:	f383 8811 	msr	BASEPRI, r3
 8001d56:	f3bf 8f6f 	isb	sy
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <vPortEnterCritical+0x54>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <vPortEnterCritical+0x54>)
 8001d68:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <vPortEnterCritical+0x54>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10e      	bne.n	8001d90 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <vPortEnterCritical+0x58>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <vPortEnterCritical+0x48>
 8001d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d80:	f383 8811 	msr	BASEPRI, r3
 8001d84:	f3bf 8f6f 	isb	sy
 8001d88:	f3bf 8f4f 	dsb	sy
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	e7fe      	b.n	8001d8e <vPortEnterCritical+0x46>
	}
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	e000ed04 	.word	0xe000ed04

08001da4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <vPortExitCritical+0x48>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <vPortExitCritical+0x22>
 8001db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	e7fe      	b.n	8001dc4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <vPortExitCritical+0x48>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	4a07      	ldr	r2, [pc, #28]	; (8001dec <vPortExitCritical+0x48>)
 8001dce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <vPortExitCritical+0x48>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d104      	bne.n	8001de2 <vPortExitCritical+0x3e>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000004 	.word	0x20000004

08001df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001df0:	f3ef 8009 	mrs	r0, PSP
 8001df4:	f3bf 8f6f 	isb	sy
 8001df8:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <pxCurrentTCBConst>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e00:	6010      	str	r0, [r2, #0]
 8001e02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001e06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e0a:	f380 8811 	msr	BASEPRI, r0
 8001e0e:	f7ff fa55 	bl	80012bc <vTaskSwitchContext>
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f380 8811 	msr	BASEPRI, r0
 8001e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	6808      	ldr	r0, [r1, #0]
 8001e22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e26:	f380 8809 	msr	PSP, r0
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	4770      	bx	lr

08001e30 <pxCurrentTCBConst>:
 8001e30:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop

08001e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8001e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001e50:	f7ff f978 	bl	8001144 <xTaskIncrementTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <xPortSysTickHandler+0x3c>)
 8001e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <vPortSetupTimerInterrupt+0x38>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <vPortSetupTimerInterrupt+0x3c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <vPortSetupTimerInterrupt+0x40>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <vPortSetupTimerInterrupt+0x44>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <vPortSetupTimerInterrupt+0x48>)
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <vPortSetupTimerInterrupt+0x38>)
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010
 8001eb4:	e000e018 	.word	0xe000e018
 8001eb8:	20000030 	.word	0x20000030
 8001ebc:	10624dd3 	.word	0x10624dd3
 8001ec0:	e000e014 	.word	0xe000e014

08001ec4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	; 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001ed0:	f7ff f88e 	bl	8000ff0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001ed4:	4b57      	ldr	r3, [pc, #348]	; (8002034 <pvPortMalloc+0x170>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001edc:	f000 f90c 	bl	80020f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ee0:	4b55      	ldr	r3, [pc, #340]	; (8002038 <pvPortMalloc+0x174>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 808c 	bne.w	8002006 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01c      	beq.n	8001f2e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d013      	beq.n	8001f2e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f023 0307 	bic.w	r3, r3, #7
 8001f0c:	3308      	adds	r3, #8
 8001f0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <pvPortMalloc+0x6a>
	__asm volatile
 8001f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1e:	f383 8811 	msr	BASEPRI, r3
 8001f22:	f3bf 8f6f 	isb	sy
 8001f26:	f3bf 8f4f 	dsb	sy
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e7fe      	b.n	8001f2c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d068      	beq.n	8002006 <pvPortMalloc+0x142>
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <pvPortMalloc+0x178>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d863      	bhi.n	8002006 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001f3e:	4b40      	ldr	r3, [pc, #256]	; (8002040 <pvPortMalloc+0x17c>)
 8001f40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <pvPortMalloc+0x17c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f48:	e004      	b.n	8001f54 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d903      	bls.n	8001f66 <pvPortMalloc+0xa2>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f1      	bne.n	8001f4a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001f66:	4b33      	ldr	r3, [pc, #204]	; (8002034 <pvPortMalloc+0x170>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d04a      	beq.n	8002006 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	4413      	add	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	1ad2      	subs	r2, r2, r3
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d91e      	bls.n	8001fd0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <pvPortMalloc+0xf4>
 8001fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	e7fe      	b.n	8001fb6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001fca:	69b8      	ldr	r0, [r7, #24]
 8001fcc:	f000 f8f6 	bl	80021bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <pvPortMalloc+0x178>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <pvPortMalloc+0x178>)
 8001fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <pvPortMalloc+0x178>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <pvPortMalloc+0x180>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d203      	bcs.n	8001ff2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <pvPortMalloc+0x178>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <pvPortMalloc+0x180>)
 8001ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <pvPortMalloc+0x174>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002006:	f7ff f801 	bl	800100c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <pvPortMalloc+0x164>
 8002014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002018:	f383 8811 	msr	BASEPRI, r3
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	f3bf 8f4f 	dsb	sy
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e7fe      	b.n	8002026 <pvPortMalloc+0x162>
	return pvReturn;
 8002028:	69fb      	ldr	r3, [r7, #28]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200011b4 	.word	0x200011b4
 8002038:	200011c0 	.word	0x200011c0
 800203c:	200011b8 	.word	0x200011b8
 8002040:	200011ac 	.word	0x200011ac
 8002044:	200011bc 	.word	0x200011bc

08002048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d046      	beq.n	80020e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800205a:	2308      	movs	r3, #8
 800205c:	425b      	negs	r3, r3
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4413      	add	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <vPortFree+0xa8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <vPortFree+0x42>
 8002076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207a:	f383 8811 	msr	BASEPRI, r3
 800207e:	f3bf 8f6f 	isb	sy
 8002082:	f3bf 8f4f 	dsb	sy
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e7fe      	b.n	8002088 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d009      	beq.n	80020a6 <vPortFree+0x5e>
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	e7fe      	b.n	80020a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <vPortFree+0xa8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d019      	beq.n	80020e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d115      	bne.n	80020e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <vPortFree+0xa8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80020cc:	f7fe ff90 	bl	8000ff0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <vPortFree+0xac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <vPortFree+0xac>)
 80020dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80020de:	6938      	ldr	r0, [r7, #16]
 80020e0:	f000 f86c 	bl	80021bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80020e4:	f7fe ff92 	bl	800100c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80020e8:	bf00      	nop
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200011c0 	.word	0x200011c0
 80020f4:	200011b8 	.word	0x200011b8

080020f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002102:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <prvHeapInit+0xac>)
 8002106:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3307      	adds	r3, #7
 8002116:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0307 	bic.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <prvHeapInit+0xac>)
 8002128:	4413      	add	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <prvHeapInit+0xb0>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <prvHeapInit+0xb0>)
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002144:	2208      	movs	r2, #8
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0307 	bic.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a15      	ldr	r2, [pc, #84]	; (80021ac <prvHeapInit+0xb4>)
 8002158:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <prvHeapInit+0xb4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <prvHeapInit+0xb4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	1ad2      	subs	r2, r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <prvHeapInit+0xb4>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <prvHeapInit+0xb8>)
 8002186:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <prvHeapInit+0xbc>)
 800218e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <prvHeapInit+0xc0>)
 8002192:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	200001ac 	.word	0x200001ac
 80021a8:	200011ac 	.word	0x200011ac
 80021ac:	200011b4 	.word	0x200011b4
 80021b0:	200011bc 	.word	0x200011bc
 80021b4:	200011b8 	.word	0x200011b8
 80021b8:	200011c0 	.word	0x200011c0

080021bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <prvInsertBlockIntoFreeList+0xa8>)
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e002      	b.n	80021d0 <prvInsertBlockIntoFreeList+0x14>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d8f7      	bhi.n	80021ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d108      	bne.n	80021fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	441a      	add	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	441a      	add	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d118      	bne.n	8002244 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <prvInsertBlockIntoFreeList+0xac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d00d      	beq.n	800223a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	e008      	b.n	800224c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <prvInsertBlockIntoFreeList+0xac>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e003      	b.n	800224c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d002      	beq.n	800225a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	200011ac 	.word	0x200011ac
 8002268:	200011b4 	.word	0x200011b4

0800226c <ADC_Mode_Init>:

extern uint16_t valueADC[4];



void ADC_Mode_Init(void){
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_CONT;
 8002270:	4b43      	ldr	r3, [pc, #268]	; (8002380 <ADC_Mode_Init+0x114>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a42      	ldr	r2, [pc, #264]	; (8002380 <ADC_Mode_Init+0x114>)
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	6093      	str	r3, [r2, #8]
	//ADC1->CR2 &= ~ADC_CR2_CONT;
	ADC1->CR2 |= ADC_CR2_EXTSEL;
 800227c:	4b40      	ldr	r3, [pc, #256]	; (8002380 <ADC_Mode_Init+0x114>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a3f      	ldr	r2, [pc, #252]	; (8002380 <ADC_Mode_Init+0x114>)
 8002282:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8002286:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTTRIG;
 8002288:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <ADC_Mode_Init+0x114>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4a3c      	ldr	r2, [pc, #240]	; (8002380 <ADC_Mode_Init+0x114>)
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002292:	6093      	str	r3, [r2, #8]

	ADC1->CR1 |= ADC_CR1_SCAN;
 8002294:	4b3a      	ldr	r3, [pc, #232]	; (8002380 <ADC_Mode_Init+0x114>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a39      	ldr	r2, [pc, #228]	; (8002380 <ADC_Mode_Init+0x114>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6053      	str	r3, [r2, #4]

	ADC1->SQR1 &= ~ADC_SQR1_L;
 80022a0:	4b37      	ldr	r3, [pc, #220]	; (8002380 <ADC_Mode_Init+0x114>)
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	4a36      	ldr	r2, [pc, #216]	; (8002380 <ADC_Mode_Init+0x114>)
 80022a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80022aa:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC1->SQR1 |= ADC_SQR1_L_1 | ADC_SQR1_L_0  ;  /// 0011 - 4 измерения
 80022ac:	4b34      	ldr	r3, [pc, #208]	; (8002380 <ADC_Mode_Init+0x114>)
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	4a33      	ldr	r2, [pc, #204]	; (8002380 <ADC_Mode_Init+0x114>)
 80022b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80022b6:	62d3      	str	r3, [r2, #44]	; 0x2c

	//обнуление
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP0; //  0 канал
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <ADC_Mode_Init+0x114>)
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <ADC_Mode_Init+0x114>)
 80022be:	f023 0307 	bic.w	r3, r3, #7
 80022c2:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP1; //  1 канал
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <ADC_Mode_Init+0x114>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4a2d      	ldr	r2, [pc, #180]	; (8002380 <ADC_Mode_Init+0x114>)
 80022ca:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80022ce:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP2; //  0 канал
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <ADC_Mode_Init+0x114>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	4a2a      	ldr	r2, [pc, #168]	; (8002380 <ADC_Mode_Init+0x114>)
 80022d6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80022da:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 &= ~ADC_SMPR2_SMP3; //  1 канал
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <ADC_Mode_Init+0x114>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4a27      	ldr	r2, [pc, #156]	; (8002380 <ADC_Mode_Init+0x114>)
 80022e2:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 80022e6:	6113      	str	r3, [r2, #16]

	ADC1->SMPR2 |= ADC_SMPR2_SMP0 ; // 111 - 289.5 циклов
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <ADC_Mode_Init+0x114>)
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	4a24      	ldr	r2, [pc, #144]	; (8002380 <ADC_Mode_Init+0x114>)
 80022ee:	f043 0307 	orr.w	r3, r3, #7
 80022f2:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP1 ;
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <ADC_Mode_Init+0x114>)
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <ADC_Mode_Init+0x114>)
 80022fa:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80022fe:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP2 ;
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <ADC_Mode_Init+0x114>)
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <ADC_Mode_Init+0x114>)
 8002306:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800230a:	6113      	str	r3, [r2, #16]
	ADC1->SMPR2 |= ADC_SMPR2_SMP3 ;
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <ADC_Mode_Init+0x114>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <ADC_Mode_Init+0x114>)
 8002312:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8002316:	6113      	str	r3, [r2, #16]

	ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <ADC_Mode_Init+0x114>)
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	4a18      	ldr	r2, [pc, #96]	; (8002380 <ADC_Mode_Init+0x114>)
 800231e:	f023 031f 	bic.w	r3, r3, #31
 8002322:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ2;
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <ADC_Mode_Init+0x114>)
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <ADC_Mode_Init+0x114>)
 800232a:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 800232e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ3;
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <ADC_Mode_Init+0x114>)
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	4a12      	ldr	r2, [pc, #72]	; (8002380 <ADC_Mode_Init+0x114>)
 8002336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800233a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 &= ~ADC_SQR3_SQ4;
 800233c:	4b10      	ldr	r3, [pc, #64]	; (8002380 <ADC_Mode_Init+0x114>)
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <ADC_Mode_Init+0x114>)
 8002342:	f423 2378 	bic.w	r3, r3, #1015808	; 0xf8000
 8002346:	6353      	str	r3, [r2, #52]	; 0x34



	ADC1->SQR3 &= ~ADC_SQR3_SQ1;  //00  //PA0
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <ADC_Mode_Init+0x114>)
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	4a0c      	ldr	r2, [pc, #48]	; (8002380 <ADC_Mode_Init+0x114>)
 800234e:	f023 031f 	bic.w	r3, r3, #31
 8002352:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |= ADC_SQR3_SQ2_0; //01
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <ADC_Mode_Init+0x114>)
 8002356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002358:	4a09      	ldr	r2, [pc, #36]	; (8002380 <ADC_Mode_Init+0x114>)
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |=ADC_SQR3_SQ3_1 ; // 10
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <ADC_Mode_Init+0x114>)
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <ADC_Mode_Init+0x114>)
 8002366:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800236a:	6353      	str	r3, [r2, #52]	; 0x34

	ADC1->SQR3 |= ADC_SQR3_SQ4_0 | ADC_SQR3_SQ4_1 ; // 11
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <ADC_Mode_Init+0x114>)
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <ADC_Mode_Init+0x114>)
 8002372:	f443 33c0 	orr.w	r3, r3, #98304	; 0x18000
 8002376:	6353      	str	r3, [r2, #52]	; 0x34




}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40012400 	.word	0x40012400

08002384 <ADC_POWER>:

void ADC_POWER(uint8_t  pwrmode){
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	memset(&valueADC[0],0,sizeof(valueADC));
 800238e:	2208      	movs	r2, #8
 8002390:	2100      	movs	r1, #0
 8002392:	4809      	ldr	r0, [pc, #36]	; (80023b8 <ADC_POWER+0x34>)
 8002394:	f001 f889 	bl	80034aa <memset>
	if (pwrmode){
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <ADC_POWER+0x20>
		ADC_Calibrate();
 800239e:	f000 f80f 	bl	80023c0 <ADC_Calibrate>
	}
	else
		ADC1->CR2 &= ~ADC_CR2_ADON;
}
 80023a2:	e005      	b.n	80023b0 <ADC_POWER+0x2c>
		ADC1->CR2 &= ~ADC_CR2_ADON;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <ADC_POWER+0x38>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <ADC_POWER+0x38>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6093      	str	r3, [r2, #8]
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200011f0 	.word	0x200011f0
 80023bc:	40012400 	.word	0x40012400

080023c0 <ADC_Calibrate>:

void ADC_Calibrate(void){
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_ADON;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <ADC_Calibrate+0x44>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <ADC_Calibrate+0x44>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_RSTCAL;
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <ADC_Calibrate+0x44>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <ADC_Calibrate+0x44>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_RSTCAL);
 80023dc:	bf00      	nop
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <ADC_Calibrate+0x44>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d0f9      	beq.n	80023de <ADC_Calibrate+0x1e>
	ADC1->CR2 |= ADC_CR2_CAL;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <ADC_Calibrate+0x44>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <ADC_Calibrate+0x44>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	6093      	str	r3, [r2, #8]
	while ((ADC1->CR2 & ADC_CR2_RSTCAL) == ADC_CR2_CAL); // пока там 1 идет калибровка по окончанию идет сброс бита
 80023f6:	bf00      	nop
 80023f8:	4b02      	ldr	r3, [pc, #8]	; (8002404 <ADC_Calibrate+0x44>)
 80023fa:	689b      	ldr	r3, [r3, #8]

}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40012400 	.word	0x40012400

08002408 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 800240c:	4b22      	ldr	r3, [pc, #136]	; (8002498 <ADC_GPIO_Init+0x90>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a21      	ldr	r2, [pc, #132]	; (8002498 <ADC_GPIO_Init+0x90>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <ADC_GPIO_Init+0x90>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a1e      	ldr	r2, [pc, #120]	; (8002498 <ADC_GPIO_Init+0x90>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <ADC_GPIO_Init+0x90>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a1b      	ldr	r2, [pc, #108]	; (8002498 <ADC_GPIO_Init+0x90>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6193      	str	r3, [r2, #24]
	// ADC ports
	GPIOA->CRL &= ~GPIO_CRL_MODE0; // PA0   - input
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <ADC_GPIO_Init+0x94>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	; (800249c <ADC_GPIO_Init+0x94>)
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF0;  //PA0    - analog mode
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <ADC_GPIO_Init+0x94>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a16      	ldr	r2, [pc, #88]	; (800249c <ADC_GPIO_Init+0x94>)
 8002442:	f023 030c 	bic.w	r3, r3, #12
 8002446:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE1; // PA1   - input
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <ADC_GPIO_Init+0x94>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a13      	ldr	r2, [pc, #76]	; (800249c <ADC_GPIO_Init+0x94>)
 800244e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002452:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF1;  //PA1    - analog mode
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <ADC_GPIO_Init+0x94>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a10      	ldr	r2, [pc, #64]	; (800249c <ADC_GPIO_Init+0x94>)
 800245a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800245e:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE2; // PA2  - input
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <ADC_GPIO_Init+0x94>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <ADC_GPIO_Init+0x94>)
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF2;  //PA2    - analog mode
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <ADC_GPIO_Init+0x94>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <ADC_GPIO_Init+0x94>)
 8002472:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002476:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE3; // PA3   - input
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <ADC_GPIO_Init+0x94>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a07      	ldr	r2, [pc, #28]	; (800249c <ADC_GPIO_Init+0x94>)
 800247e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002482:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF3;  //PA3    - analog mode
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <ADC_GPIO_Init+0x94>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a04      	ldr	r2, [pc, #16]	; (800249c <ADC_GPIO_Init+0x94>)
 800248a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800248e:	6013      	str	r3, [r2, #0]


}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000
 800249c:	40010800 	.word	0x40010800

080024a0 <ADC_DMA_Init>:

void ADC_DMA_Init(void){
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	//--------------------------------------------------------------------------------
		//     DMA   ADC1

		RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <ADC_DMA_Init+0x8c>)
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	4a20      	ldr	r2, [pc, #128]	; (800252c <ADC_DMA_Init+0x8c>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6153      	str	r3, [r2, #20]
		DMA1_Channel1->CPAR = (uint32_t) &ADC1->DR;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <ADC_DMA_Init+0x90>)
 80024b2:	4a20      	ldr	r2, [pc, #128]	; (8002534 <ADC_DMA_Init+0x94>)
 80024b4:	609a      	str	r2, [r3, #8]
		DMA1_Channel1->CMAR = (uint32_t) &valueADC[0];
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <ADC_DMA_Init+0x90>)
 80024b8:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <ADC_DMA_Init+0x98>)
 80024ba:	60da      	str	r2, [r3, #12]
		DMA1_Channel1->CNDTR = 4;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <ADC_DMA_Init+0x90>)
 80024be:	2204      	movs	r2, #4
 80024c0:	605a      	str	r2, [r3, #4]
		DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <ADC_DMA_Init+0x90>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <ADC_DMA_Init+0x90>)
 80024c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024cc:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <ADC_DMA_Init+0x90>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a17      	ldr	r2, [pc, #92]	; (8002530 <ADC_DMA_Init+0x90>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <ADC_DMA_Init+0x90>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <ADC_DMA_Init+0x90>)
 80024e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024e4:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_MINC;
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <ADC_DMA_Init+0x90>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a11      	ldr	r2, [pc, #68]	; (8002530 <ADC_DMA_Init+0x90>)
 80024ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f0:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <ADC_DMA_Init+0x90>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <ADC_DMA_Init+0x90>)
 80024f8:	f043 0320 	orr.w	r3, r3, #32
 80024fc:	6013      	str	r3, [r2, #0]
		//DMA1_Channel1->CCR &= ~DMA_CCR_CIRC;
		DMA1_Channel1->CCR &= ~DMA_CCR_DIR;
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <ADC_DMA_Init+0x90>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a0b      	ldr	r2, [pc, #44]	; (8002530 <ADC_DMA_Init+0x90>)
 8002504:	f023 0310 	bic.w	r3, r3, #16
 8002508:	6013      	str	r3, [r2, #0]
		DMA1_Channel1->CCR |= DMA_CCR_EN;
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <ADC_DMA_Init+0x90>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a08      	ldr	r2, [pc, #32]	; (8002530 <ADC_DMA_Init+0x90>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6013      	str	r3, [r2, #0]
		ADC1->CR2 |= ADC_CR2_DMA;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <ADC_DMA_Init+0x9c>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <ADC_DMA_Init+0x9c>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6093      	str	r3, [r2, #8]



}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40020008 	.word	0x40020008
 8002534:	4001244c 	.word	0x4001244c
 8002538:	200011f0 	.word	0x200011f0
 800253c:	40012400 	.word	0x40012400

08002540 <RCC_PLL_Init>:
#include "defines.h"
#include "libRCC.h"

void RCC_PLL_Init(void){
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
	 // настройка HSE PLL SYSCLK
		RCC->CR |= RCC_CR_HSEON;
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a35      	ldr	r2, [pc, #212]	; (8002620 <RCC_PLL_Init+0xe0>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254e:	6013      	str	r3, [r2, #0]
		while (!  (RCC->CR & RCC_CR_HSERDY)   );
 8002550:	bf00      	nop
 8002552:	4b33      	ldr	r3, [pc, #204]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f9      	beq.n	8002552 <RCC_PLL_Init+0x12>
		FLASH ->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <RCC_PLL_Init+0xe4>)
 8002560:	2217      	movs	r2, #23
 8002562:	601a      	str	r2, [r3, #0]
		RCC->CFGR &= ~RCC_CFGR_HPRE;  // 0000   /1
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a2d      	ldr	r2, [pc, #180]	; (8002620 <RCC_PLL_Init+0xe0>)
 800256a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256e:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;//100 - /2
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4a2a      	ldr	r2, [pc, #168]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800257a:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~RCC_CFGR_PPRE2; //000  - /1
 800257c:	4b28      	ldr	r3, [pc, #160]	; (8002620 <RCC_PLL_Init+0xe0>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a27      	ldr	r2, [pc, #156]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002582:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002586:	6053      	str	r3, [r2, #4]
		RCC->CFGR |=  RCC_CFGR_ADCPRE_DIV8;
 8002588:	4b25      	ldr	r3, [pc, #148]	; (8002620 <RCC_PLL_Init+0xe0>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a24      	ldr	r2, [pc, #144]	; (8002620 <RCC_PLL_Init+0xe0>)
 800258e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002592:	6053      	str	r3, [r2, #4]

		RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <RCC_PLL_Init+0xe0>)
 800259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259e:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~RCC_CFGR_PLLMULL;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025a6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80025aa:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~RCC_CFGR_PLLXTPRE;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025b6:	6053      	str	r3, [r2, #4]

		RCC->CFGR |= RCC_CFGR_PLLSRC;
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c2:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= RCC_CFGR_PLLMULL9;
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025d2:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80025d6:	6053      	str	r3, [r2, #4]

		RCC->CR |= RCC_CR_PLLON;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a10      	ldr	r2, [pc, #64]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]
		while (!  (RCC->CR & RCC_CR_PLLRDY)   );
 80025e4:	bf00      	nop
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f9      	beq.n	80025e6 <RCC_PLL_Init+0xa6>

		RCC->CFGR &= ~RCC_CFGR_SW;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <RCC_PLL_Init+0xe0>)
 80025f8:	f023 0303 	bic.w	r3, r3, #3
 80025fc:	6053      	str	r3, [r2, #4]
		RCC->CFGR |=  RCC_CFGR_SW_PLL;
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <RCC_PLL_Init+0xe0>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6053      	str	r3, [r2, #4]

		//RCC->CFGR |= RCC_CFGR_MCOSEL_PLL_DIV2;


		while (  (RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1   ) ;
 800260a:	bf00      	nop
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <RCC_PLL_Init+0xe0>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d1f9      	bne.n	800260c <RCC_PLL_Init+0xcc>
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40021000 	.word	0x40021000
 8002624:	40022000 	.word	0x40022000

08002628 <vTaskBlink>:

		vTaskDelay(100);

	}
}
void vTaskBlink( void *argument){
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <vTaskBlink+0x54>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <vTaskBlink+0x54>)
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	6193      	str	r3, [r2, #24]
	GPIOC->CRH |= GPIO_CRH_MODE13; // PC13   - output
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <vTaskBlink+0x58>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <vTaskBlink+0x58>)
 8002642:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002646:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF13;  //PC13   - GP out PP
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <vTaskBlink+0x58>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <vTaskBlink+0x58>)
 800264e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002652:	6053      	str	r3, [r2, #4]

	while(1){
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <vTaskBlink+0x58>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a09      	ldr	r2, [pc, #36]	; (8002680 <vTaskBlink+0x58>)
 800265a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800265e:	6113      	str	r3, [r2, #16]
	vTaskDelay(900);
 8002660:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002664:	f7fe fb22 	bl	8000cac <vTaskDelay>
	GPIOC->BSRR |= GPIO_BSRR_BR13;
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <vTaskBlink+0x58>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <vTaskBlink+0x58>)
 800266e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002672:	6113      	str	r3, [r2, #16]
	vTaskDelay(100);
 8002674:	2064      	movs	r0, #100	; 0x64
 8002676:	f7fe fb19 	bl	8000cac <vTaskDelay>
	GPIOC->BSRR |= GPIO_BSRR_BS13;
 800267a:	e7eb      	b.n	8002654 <vTaskBlink+0x2c>
 800267c:	40021000 	.word	0x40021000
 8002680:	40011000 	.word	0x40011000

08002684 <vTaskHello>:
	}
}
void vTaskHello( void *argument){
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	USART1_GPIO_Init();
 800268c:	f000 fcd6 	bl	800303c <USART1_GPIO_Init>
	USART1_Mode_Init();
 8002690:	f000 fd08 	bl	80030a4 <USART1_Mode_Init>

	while(1){
	USART1SendStr("Hello\r\n");
 8002694:	4803      	ldr	r0, [pc, #12]	; (80026a4 <vTaskHello+0x20>)
 8002696:	f000 fd41 	bl	800311c <USART1SendStr>
	vTaskDelay(2000);
 800269a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800269e:	f7fe fb05 	bl	8000cac <vTaskDelay>
	USART1SendStr("Hello\r\n");
 80026a2:	e7f7      	b.n	8002694 <vTaskHello+0x10>
 80026a4:	08003dec 	.word	0x08003dec

080026a8 <vTaskADCConvert>:
	}
}

void vTaskADCConvert (void *argument){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	USART1_GPIO_Init();
 80026b0:	f000 fcc4 	bl	800303c <USART1_GPIO_Init>
	USART1_Mode_Init();
 80026b4:	f000 fcf6 	bl	80030a4 <USART1_Mode_Init>
	ADC_GPIO_Init();
 80026b8:	f7ff fea6 	bl	8002408 <ADC_GPIO_Init>
	ADC_Mode_Init();
 80026bc:	f7ff fdd6 	bl	800226c <ADC_Mode_Init>
	char strbuffer[6];
	ADC_DMA_Init();
 80026c0:	f7ff feee 	bl	80024a0 <ADC_DMA_Init>
	ADC_POWER(ON);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff fe5d 	bl	8002384 <ADC_POWER>
	while (1){
		ADC1->CR2 |= ADC_CR2_SWSTART; // start
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <vTaskADCConvert+0xe8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	4a30      	ldr	r2, [pc, #192]	; (8002790 <vTaskADCConvert+0xe8>)
 80026d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026d4:	6093      	str	r3, [r2, #8]
		while (  (DMA1->ISR & DMA_ISR_TCIF1) == 0  );
 80026d6:	bf00      	nop
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <vTaskADCConvert+0xec>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f9      	beq.n	80026d8 <vTaskADCConvert+0x30>

		sprintf(strbuffer, "%u",valueADC[0]);
 80026e4:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <vTaskADCConvert+0xf0>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	492b      	ldr	r1, [pc, #172]	; (800279c <vTaskADCConvert+0xf4>)
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fee3 	bl	80034bc <siprintf>
		USART1SendStr("BatLevel      =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 80026f6:	482a      	ldr	r0, [pc, #168]	; (80027a0 <vTaskADCConvert+0xf8>)
 80026f8:	f000 fd10 	bl	800311c <USART1SendStr>
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd0b 	bl	800311c <USART1SendStr>
 8002706:	4827      	ldr	r0, [pc, #156]	; (80027a4 <vTaskADCConvert+0xfc>)
 8002708:	f000 fd08 	bl	800311c <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[1]);
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <vTaskADCConvert+0xf0>)
 800270e:	885b      	ldrh	r3, [r3, #2]
 8002710:	461a      	mov	r2, r3
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	4921      	ldr	r1, [pc, #132]	; (800279c <vTaskADCConvert+0xf4>)
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fecf 	bl	80034bc <siprintf>
		USART1SendStr("CurrentLevel  =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 800271e:	4822      	ldr	r0, [pc, #136]	; (80027a8 <vTaskADCConvert+0x100>)
 8002720:	f000 fcfc 	bl	800311c <USART1SendStr>
 8002724:	f107 0308 	add.w	r3, r7, #8
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fcf7 	bl	800311c <USART1SendStr>
 800272e:	481d      	ldr	r0, [pc, #116]	; (80027a4 <vTaskADCConvert+0xfc>)
 8002730:	f000 fcf4 	bl	800311c <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[2]);
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <vTaskADCConvert+0xf0>)
 8002736:	889b      	ldrh	r3, [r3, #4]
 8002738:	461a      	mov	r2, r3
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	4917      	ldr	r1, [pc, #92]	; (800279c <vTaskADCConvert+0xf4>)
 8002740:	4618      	mov	r0, r3
 8002742:	f000 febb 	bl	80034bc <siprintf>
		USART1SendStr("LED1          =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 8002746:	4819      	ldr	r0, [pc, #100]	; (80027ac <vTaskADCConvert+0x104>)
 8002748:	f000 fce8 	bl	800311c <USART1SendStr>
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fce3 	bl	800311c <USART1SendStr>
 8002756:	4813      	ldr	r0, [pc, #76]	; (80027a4 <vTaskADCConvert+0xfc>)
 8002758:	f000 fce0 	bl	800311c <USART1SendStr>
		sprintf(strbuffer, "%u",valueADC[3]);
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <vTaskADCConvert+0xf0>)
 800275e:	88db      	ldrh	r3, [r3, #6]
 8002760:	461a      	mov	r2, r3
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	490d      	ldr	r1, [pc, #52]	; (800279c <vTaskADCConvert+0xf4>)
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fea7 	bl	80034bc <siprintf>
		USART1SendStr("LED2          =");USART1SendStr(strbuffer);USART1SendStr("\r\n");
 800276e:	4810      	ldr	r0, [pc, #64]	; (80027b0 <vTaskADCConvert+0x108>)
 8002770:	f000 fcd4 	bl	800311c <USART1SendStr>
 8002774:	f107 0308 	add.w	r3, r7, #8
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fccf 	bl	800311c <USART1SendStr>
 800277e:	4809      	ldr	r0, [pc, #36]	; (80027a4 <vTaskADCConvert+0xfc>)
 8002780:	f000 fccc 	bl	800311c <USART1SendStr>

		vTaskDelay(500);
 8002784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002788:	f7fe fa90 	bl	8000cac <vTaskDelay>
		ADC1->CR2 |= ADC_CR2_SWSTART; // start
 800278c:	e79d      	b.n	80026ca <vTaskADCConvert+0x22>
 800278e:	bf00      	nop
 8002790:	40012400 	.word	0x40012400
 8002794:	40020000 	.word	0x40020000
 8002798:	200011f0 	.word	0x200011f0
 800279c:	08003d80 	.word	0x08003d80
 80027a0:	08003df4 	.word	0x08003df4
 80027a4:	08003d94 	.word	0x08003d94
 80027a8:	08003e04 	.word	0x08003e04
 80027ac:	08003e14 	.word	0x08003e14
 80027b0:	08003e24 	.word	0x08003e24

080027b4 <vTaskServo>:
   else
      return strncpy(buf, s + pos, count);
}


void vTaskServo(void *argument){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	PWM_Servo_Init_TIM3();
 80027bc:	f000 fb32 	bl	8002e24 <PWM_Servo_Init_TIM3>
	PWM_Level_TIM3_Ch1(100);
 80027c0:	2064      	movs	r0, #100	; 0x64
 80027c2:	f000 fb97 	bl	8002ef4 <PWM_Level_TIM3_Ch1>
	vTaskDelay(1000);
 80027c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ca:	f7fe fa6f 	bl	8000cac <vTaskDelay>
	//char buffer[20];


	while(1){
		if( xSemaphoreTake( xSemaphorMOVE, 0 ) == pdPASS )
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <vTaskServo+0x5c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd ff37 	bl	8000648 <xQueueSemaphoreTake>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d112      	bne.n	8002806 <vTaskServo+0x52>
		{

			PWM_Level_TIM3_Ch1(75+degree);
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <vTaskServo+0x60>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	334b      	adds	r3, #75	; 0x4b
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fb82 	bl	8002ef4 <PWM_Level_TIM3_Ch1>
			if (degree==0)
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <vTaskServo+0x60>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <vTaskServo+0x4c>
				CurrentStateZero=1;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <vTaskServo+0x64>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e002      	b.n	8002806 <vTaskServo+0x52>
			else
				CurrentStateZero=0;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <vTaskServo+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(100);
 8002806:	2064      	movs	r0, #100	; 0x64
 8002808:	f7fe fa50 	bl	8000cac <vTaskDelay>
		if( xSemaphoreTake( xSemaphorMOVE, 0 ) == pdPASS )
 800280c:	e7df      	b.n	80027ce <vTaskServo+0x1a>
 800280e:	bf00      	nop
 8002810:	200011ec 	.word	0x200011ec
 8002814:	200011c4 	.word	0x200011c4
 8002818:	20000008 	.word	0x20000008

0800281c <vTaskCmdExe>:
	}

}


void vTaskCmdExe(void *argument){
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	char buffer[20];
	USART1_GPIO_Init();
 8002824:	f000 fc0a 	bl	800303c <USART1_GPIO_Init>
	USART1_Mode_Init();
 8002828:	f000 fc3c 	bl	80030a4 <USART1_Mode_Init>
	newCommandFlag=0;
 800282c:	4bb7      	ldr	r3, [pc, #732]	; (8002b0c <vTaskCmdExe+0x2f0>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]

	xSemaphorMOVE = xSemaphoreCreateBinary();
 8002832:	2203      	movs	r2, #3
 8002834:	2100      	movs	r1, #0
 8002836:	2001      	movs	r0, #1
 8002838:	f7fd fdb4 	bl	80003a4 <xQueueGenericCreate>
 800283c:	4602      	mov	r2, r0
 800283e:	4bb4      	ldr	r3, [pc, #720]	; (8002b10 <vTaskCmdExe+0x2f4>)
 8002840:	601a      	str	r2, [r3, #0]
	xSemaphorTAMPER = xSemaphoreCreateBinary();
 8002842:	2203      	movs	r2, #3
 8002844:	2100      	movs	r1, #0
 8002846:	2001      	movs	r0, #1
 8002848:	f7fd fdac 	bl	80003a4 <xQueueGenericCreate>
 800284c:	4602      	mov	r2, r0
 800284e:	4bb1      	ldr	r3, [pc, #708]	; (8002b14 <vTaskCmdExe+0x2f8>)
 8002850:	601a      	str	r2, [r3, #0]
	xSemaphorGERCON = xSemaphoreCreateBinary();
 8002852:	2203      	movs	r2, #3
 8002854:	2100      	movs	r1, #0
 8002856:	2001      	movs	r0, #1
 8002858:	f7fd fda4 	bl	80003a4 <xQueueGenericCreate>
 800285c:	4602      	mov	r2, r0
 800285e:	4bae      	ldr	r3, [pc, #696]	; (8002b18 <vTaskCmdExe+0x2fc>)
 8002860:	601a      	str	r2, [r3, #0]

	PWM_Power_Init_TIM3();
 8002862:	f000 fb67 	bl	8002f34 <PWM_Power_Init_TIM3>

	while(1)
	{


		if (newCommandFlag)
 8002866:	4ba9      	ldr	r3, [pc, #676]	; (8002b0c <vTaskCmdExe+0x2f0>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 82ad 	beq.w	8002dca <vTaskCmdExe+0x5ae>
		{
			while(1)
			{
				if (strncmp(commandStr, OK , 2)==0){
 8002870:	4baa      	ldr	r3, [pc, #680]	; (8002b1c <vTaskCmdExe+0x300>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2202      	movs	r2, #2
 8002876:	4619      	mov	r1, r3
 8002878:	48a9      	ldr	r0, [pc, #676]	; (8002b20 <vTaskCmdExe+0x304>)
 800287a:	f000 fe3f 	bl	80034fc <strncmp>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <vTaskCmdExe+0x76>
					USART1SendStr("---OK---\r\n");
 8002884:	48a7      	ldr	r0, [pc, #668]	; (8002b24 <vTaskCmdExe+0x308>)
 8002886:	f000 fc49 	bl	800311c <USART1SendStr>
					newCommandFlag=0;
 800288a:	4ba0      	ldr	r3, [pc, #640]	; (8002b0c <vTaskCmdExe+0x2f0>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
					break;
 8002890:	e29b      	b.n	8002dca <vTaskCmdExe+0x5ae>
				}
				if (strncmp(commandStr, POWER , 6)==0){
 8002892:	4ba5      	ldr	r3, [pc, #660]	; (8002b28 <vTaskCmdExe+0x30c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2206      	movs	r2, #6
 8002898:	4619      	mov	r1, r3
 800289a:	48a1      	ldr	r0, [pc, #644]	; (8002b20 <vTaskCmdExe+0x304>)
 800289c:	f000 fe2e 	bl	80034fc <strncmp>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d128      	bne.n	80028f8 <vTaskCmdExe+0xdc>
					strncpy(buffer,commandStr+6,2);
 80028a6:	49a1      	ldr	r1, [pc, #644]	; (8002b2c <vTaskCmdExe+0x310>)
 80028a8:	f107 0308 	add.w	r3, r7, #8
 80028ac:	2202      	movs	r2, #2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fe36 	bl	8003520 <strncpy>
					if(strncmp(buffer,"ON",3)==0){
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	2203      	movs	r2, #3
 80028ba:	499d      	ldr	r1, [pc, #628]	; (8002b30 <vTaskCmdExe+0x314>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fe1d 	bl	80034fc <strncmp>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <vTaskCmdExe+0xba>
						//включение
						USART1SendStr("---OK---\r\n");
 80028c8:	4896      	ldr	r0, [pc, #600]	; (8002b24 <vTaskCmdExe+0x308>)
 80028ca:	f000 fc27 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 80028ce:	4b8f      	ldr	r3, [pc, #572]	; (8002b0c <vTaskCmdExe+0x2f0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
 80028d4:	e279      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"OFF",3)==0){
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	2203      	movs	r2, #3
 80028dc:	4995      	ldr	r1, [pc, #596]	; (8002b34 <vTaskCmdExe+0x318>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fe0c 	bl	80034fc <strncmp>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <vTaskCmdExe+0xdc>
						//выключение
						USART1SendStr("---OK---\r\n");
 80028ea:	488e      	ldr	r0, [pc, #568]	; (8002b24 <vTaskCmdExe+0x308>)
 80028ec:	f000 fc16 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 80028f0:	4b86      	ldr	r3, [pc, #536]	; (8002b0c <vTaskCmdExe+0x2f0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e268      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
				}
				if (strncmp(commandStr, STOP , 4)==0){
 80028f8:	4b8f      	ldr	r3, [pc, #572]	; (8002b38 <vTaskCmdExe+0x31c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2204      	movs	r2, #4
 80028fe:	4619      	mov	r1, r3
 8002900:	4887      	ldr	r0, [pc, #540]	; (8002b20 <vTaskCmdExe+0x304>)
 8002902:	f000 fdfb 	bl	80034fc <strncmp>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d11a      	bne.n	8002942 <vTaskCmdExe+0x126>

					vTaskSuspend(xSERVO_Handle);
 800290c:	4b8b      	ldr	r3, [pc, #556]	; (8002b3c <vTaskCmdExe+0x320>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe f9ff 	bl	8000d14 <vTaskSuspend>
					vTaskSuspend(xINFO_Handle);
 8002916:	4b8a      	ldr	r3, [pc, #552]	; (8002b40 <vTaskCmdExe+0x324>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f9fa 	bl	8000d14 <vTaskSuspend>
					vTaskSuspend(xBLINK_Handle);
 8002920:	4b88      	ldr	r3, [pc, #544]	; (8002b44 <vTaskCmdExe+0x328>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f9f5 	bl	8000d14 <vTaskSuspend>
					vTaskSuspend(xADC_Handle);
 800292a:	4b87      	ldr	r3, [pc, #540]	; (8002b48 <vTaskCmdExe+0x32c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe f9f0 	bl	8000d14 <vTaskSuspend>

					USART1SendStr("---OK---\r\n");
 8002934:	487b      	ldr	r0, [pc, #492]	; (8002b24 <vTaskCmdExe+0x308>)
 8002936:	f000 fbf1 	bl	800311c <USART1SendStr>
					newCommandFlag=0;
 800293a:	4b74      	ldr	r3, [pc, #464]	; (8002b0c <vTaskCmdExe+0x2f0>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
					break;
 8002940:	e243      	b.n	8002dca <vTaskCmdExe+0x5ae>
				}
				if (strncmp(commandStr, RUN , 3)==0){
 8002942:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <vTaskCmdExe+0x330>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2203      	movs	r2, #3
 8002948:	4619      	mov	r1, r3
 800294a:	4875      	ldr	r0, [pc, #468]	; (8002b20 <vTaskCmdExe+0x304>)
 800294c:	f000 fdd6 	bl	80034fc <strncmp>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11a      	bne.n	800298c <vTaskCmdExe+0x170>


					vTaskResume(xSERVO_Handle);
 8002956:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <vTaskCmdExe+0x320>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe faa6 	bl	8000eac <vTaskResume>
					vTaskResume(xINFO_Handle);
 8002960:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <vTaskCmdExe+0x324>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe faa1 	bl	8000eac <vTaskResume>
					vTaskResume(xBLINK_Handle);
 800296a:	4b76      	ldr	r3, [pc, #472]	; (8002b44 <vTaskCmdExe+0x328>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fa9c 	bl	8000eac <vTaskResume>
					vTaskResume(xADC_Handle);
 8002974:	4b74      	ldr	r3, [pc, #464]	; (8002b48 <vTaskCmdExe+0x32c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fa97 	bl	8000eac <vTaskResume>

					USART1SendStr("---OK---\r\n");
 800297e:	4869      	ldr	r0, [pc, #420]	; (8002b24 <vTaskCmdExe+0x308>)
 8002980:	f000 fbcc 	bl	800311c <USART1SendStr>
					newCommandFlag=0;
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <vTaskCmdExe+0x2f0>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
					break;
 800298a:	e21e      	b.n	8002dca <vTaskCmdExe+0x5ae>
				}
				if (strncmp(commandStr, EXTCONTACT , 4)==0){
 800298c:	4b70      	ldr	r3, [pc, #448]	; (8002b50 <vTaskCmdExe+0x334>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2204      	movs	r2, #4
 8002992:	4619      	mov	r1, r3
 8002994:	4862      	ldr	r0, [pc, #392]	; (8002b20 <vTaskCmdExe+0x304>)
 8002996:	f000 fdb1 	bl	80034fc <strncmp>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d121      	bne.n	80029e4 <vTaskCmdExe+0x1c8>
					if(strncmp(buffer,"ON",3)==0){
 80029a0:	f107 0308 	add.w	r3, r7, #8
 80029a4:	2203      	movs	r2, #3
 80029a6:	4962      	ldr	r1, [pc, #392]	; (8002b30 <vTaskCmdExe+0x314>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fda7 	bl	80034fc <strncmp>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <vTaskCmdExe+0x1a6>
						//включение

						USART1SendStr("---OK---\r\n");
 80029b4:	485b      	ldr	r0, [pc, #364]	; (8002b24 <vTaskCmdExe+0x308>)
 80029b6:	f000 fbb1 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 80029ba:	4b54      	ldr	r3, [pc, #336]	; (8002b0c <vTaskCmdExe+0x2f0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e203      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"OFF",3)==0){
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	2203      	movs	r2, #3
 80029c8:	495a      	ldr	r1, [pc, #360]	; (8002b34 <vTaskCmdExe+0x318>)
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fd96 	bl	80034fc <strncmp>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <vTaskCmdExe+0x1c8>
						//выключение
						USART1SendStr("---OK---\r\n");
 80029d6:	4853      	ldr	r0, [pc, #332]	; (8002b24 <vTaskCmdExe+0x308>)
 80029d8:	f000 fba0 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 80029dc:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <vTaskCmdExe+0x2f0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e1f2      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
				}

				if (strncmp(commandStr, MOVEON , 4)==0){
 80029e4:	4b5b      	ldr	r3, [pc, #364]	; (8002b54 <vTaskCmdExe+0x338>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2204      	movs	r2, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	484c      	ldr	r0, [pc, #304]	; (8002b20 <vTaskCmdExe+0x304>)
 80029ee:	f000 fd85 	bl	80034fc <strncmp>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d170      	bne.n	8002ada <vTaskCmdExe+0x2be>
					if (commandStr[4]!='=')
 80029f8:	4b49      	ldr	r3, [pc, #292]	; (8002b20 <vTaskCmdExe+0x304>)
 80029fa:	791b      	ldrb	r3, [r3, #4]
 80029fc:	2b3d      	cmp	r3, #61	; 0x3d
 80029fe:	d00b      	beq.n	8002a18 <vTaskCmdExe+0x1fc>
					{
						if (CurrentStateZero)
 8002a00:	4b55      	ldr	r3, [pc, #340]	; (8002b58 <vTaskCmdExe+0x33c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <vTaskCmdExe+0x1f4>
							degree=30;
 8002a08:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <vTaskCmdExe+0x340>)
 8002a0a:	221e      	movs	r2, #30
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e056      	b.n	8002abe <vTaskCmdExe+0x2a2>
						else
							degree=0;
 8002a10:	4b52      	ldr	r3, [pc, #328]	; (8002b5c <vTaskCmdExe+0x340>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e052      	b.n	8002abe <vTaskCmdExe+0x2a2>
					}
					else
					{
						uint8_t  len= 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	77fb      	strb	r3, [r7, #31]
						while(commandStr[len++]!=0);
 8002a1c:	bf00      	nop
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	77fa      	strb	r2, [r7, #31]
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <vTaskCmdExe+0x304>)
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f7      	bne.n	8002a1e <vTaskCmdExe+0x202>
						len-=6;
 8002a2e:	7ffb      	ldrb	r3, [r7, #31]
 8002a30:	3b06      	subs	r3, #6
 8002a32:	77fb      	strb	r3, [r7, #31]
						strncpy(buffer,commandStr+5,len);
 8002a34:	494a      	ldr	r1, [pc, #296]	; (8002b60 <vTaskCmdExe+0x344>)
 8002a36:	7ffa      	ldrb	r2, [r7, #31]
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fd6f 	bl	8003520 <strncpy>
						degree=0;
 8002a42:	4b46      	ldr	r3, [pc, #280]	; (8002b5c <vTaskCmdExe+0x340>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
						for (uint8_t i=0;i<len;i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	77bb      	strb	r3, [r7, #30]
 8002a4c:	e033      	b.n	8002ab6 <vTaskCmdExe+0x29a>
							if (buffer[i]>=0x30 &&  buffer[i]<=0x39){
 8002a4e:	7fbb      	ldrb	r3, [r7, #30]
 8002a50:	f107 0220 	add.w	r2, r7, #32
 8002a54:	4413      	add	r3, r2
 8002a56:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a5a:	2b2f      	cmp	r3, #47	; 0x2f
 8002a5c:	d928      	bls.n	8002ab0 <vTaskCmdExe+0x294>
 8002a5e:	7fbb      	ldrb	r3, [r7, #30]
 8002a60:	f107 0220 	add.w	r2, r7, #32
 8002a64:	4413      	add	r3, r2
 8002a66:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a6a:	2b39      	cmp	r3, #57	; 0x39
 8002a6c:	d820      	bhi.n	8002ab0 <vTaskCmdExe+0x294>
								uint8_t bufi=(buffer[i]-0x30);
 8002a6e:	7fbb      	ldrb	r3, [r7, #30]
 8002a70:	f107 0220 	add.w	r2, r7, #32
 8002a74:	4413      	add	r3, r2
 8002a76:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a7a:	3b30      	subs	r3, #48	; 0x30
 8002a7c:	777b      	strb	r3, [r7, #29]
								uint8_t j = len-i-1;
 8002a7e:	7ffa      	ldrb	r2, [r7, #31]
 8002a80:	7fbb      	ldrb	r3, [r7, #30]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	773b      	strb	r3, [r7, #28]
								while (j--) bufi*=10;
 8002a8a:	e005      	b.n	8002a98 <vTaskCmdExe+0x27c>
 8002a8c:	7f7b      	ldrb	r3, [r7, #29]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	0092      	lsls	r2, r2, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	777b      	strb	r3, [r7, #29]
 8002a98:	7f3b      	ldrb	r3, [r7, #28]
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	773a      	strb	r2, [r7, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f4      	bne.n	8002a8c <vTaskCmdExe+0x270>
								degree+=bufi;
 8002aa2:	4b2e      	ldr	r3, [pc, #184]	; (8002b5c <vTaskCmdExe+0x340>)
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	7f7b      	ldrb	r3, [r7, #29]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <vTaskCmdExe+0x340>)
 8002aae:	701a      	strb	r2, [r3, #0]
						for (uint8_t i=0;i<len;i++)
 8002ab0:	7fbb      	ldrb	r3, [r7, #30]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	77bb      	strb	r3, [r7, #30]
 8002ab6:	7fba      	ldrb	r2, [r7, #30]
 8002ab8:	7ffb      	ldrb	r3, [r7, #31]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3c7      	bcc.n	8002a4e <vTaskCmdExe+0x232>
							}
					}
					xSemaphoreGive(xSemaphorMOVE);
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <vTaskCmdExe+0x2f4>)
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f7fd fcc4 	bl	8000454 <xQueueGenericSend>
					USART1SendStr("---OK---\r\n");
 8002acc:	4815      	ldr	r0, [pc, #84]	; (8002b24 <vTaskCmdExe+0x308>)
 8002ace:	f000 fb25 	bl	800311c <USART1SendStr>
					newCommandFlag=0;break;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <vTaskCmdExe+0x2f0>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e177      	b.n	8002dca <vTaskCmdExe+0x5ae>
				}
				if (strncmp(commandStr, TAMPER , 6)==0){
 8002ada:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <vTaskCmdExe+0x348>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2206      	movs	r2, #6
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	480f      	ldr	r0, [pc, #60]	; (8002b20 <vTaskCmdExe+0x304>)
 8002ae4:	f000 fd0a 	bl	80034fc <strncmp>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d13c      	bne.n	8002b68 <vTaskCmdExe+0x34c>
					xSemaphoreGive(xSemaphorTAMPER);
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <vTaskCmdExe+0x2f8>)
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	2300      	movs	r3, #0
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	f7fd fcac 	bl	8000454 <xQueueGenericSend>
					USART1SendStr("---OK---\r\n");
 8002afc:	4809      	ldr	r0, [pc, #36]	; (8002b24 <vTaskCmdExe+0x308>)
 8002afe:	f000 fb0d 	bl	800311c <USART1SendStr>
					newCommandFlag=0;break;
 8002b02:	4b02      	ldr	r3, [pc, #8]	; (8002b0c <vTaskCmdExe+0x2f0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e15f      	b.n	8002dca <vTaskCmdExe+0x5ae>
 8002b0a:	bf00      	nop
 8002b0c:	20001214 	.word	0x20001214
 8002b10:	200011ec 	.word	0x200011ec
 8002b14:	2000120c 	.word	0x2000120c
 8002b18:	20001208 	.word	0x20001208
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	200011d8 	.word	0x200011d8
 8002b24:	08003e34 	.word	0x08003e34
 8002b28:	20000028 	.word	0x20000028
 8002b2c:	200011de 	.word	0x200011de
 8002b30:	08003e40 	.word	0x08003e40
 8002b34:	08003e44 	.word	0x08003e44
 8002b38:	20000020 	.word	0x20000020
 8002b3c:	20001248 	.word	0x20001248
 8002b40:	20001220 	.word	0x20001220
 8002b44:	20001228 	.word	0x20001228
 8002b48:	20001224 	.word	0x20001224
 8002b4c:	20000024 	.word	0x20000024
 8002b50:	2000002c 	.word	0x2000002c
 8002b54:	20000010 	.word	0x20000010
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	200011c4 	.word	0x200011c4
 8002b60:	200011dd 	.word	0x200011dd
 8002b64:	20000014 	.word	0x20000014
				}
				if (strncmp(commandStr, GERCON , 6)==0){
 8002b68:	4b9a      	ldr	r3, [pc, #616]	; (8002dd4 <vTaskCmdExe+0x5b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2206      	movs	r2, #6
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4899      	ldr	r0, [pc, #612]	; (8002dd8 <vTaskCmdExe+0x5bc>)
 8002b72:	f000 fcc3 	bl	80034fc <strncmp>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <vTaskCmdExe+0x37c>
					xSemaphoreGive(xSemaphorGERCON);
 8002b7c:	4b97      	ldr	r3, [pc, #604]	; (8002ddc <vTaskCmdExe+0x5c0>)
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	f7fd fc65 	bl	8000454 <xQueueGenericSend>
					USART1SendStr("---OK---\r\n");
 8002b8a:	4895      	ldr	r0, [pc, #596]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002b8c:	f000 fac6 	bl	800311c <USART1SendStr>
					newCommandFlag=0;break;
 8002b90:	4b94      	ldr	r3, [pc, #592]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e118      	b.n	8002dca <vTaskCmdExe+0x5ae>
				}

				if (strncmp(commandStr, VOLTAGE , 8)==0)
 8002b98:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <vTaskCmdExe+0x5cc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	488d      	ldr	r0, [pc, #564]	; (8002dd8 <vTaskCmdExe+0x5bc>)
 8002ba2:	f000 fcab 	bl	80034fc <strncmp>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 8102 	bne.w	8002db2 <vTaskCmdExe+0x596>
				{
					strncpy(buffer,commandStr+8,2);
 8002bae:	498f      	ldr	r1, [pc, #572]	; (8002dec <vTaskCmdExe+0x5d0>)
 8002bb0:	f107 0308 	add.w	r3, r7, #8
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fcb2 	bl	8003520 <strncpy>
					if(strncmp(buffer,"0",2)==0){
 8002bbc:	f107 0308 	add.w	r3, r7, #8
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	498b      	ldr	r1, [pc, #556]	; (8002df0 <vTaskCmdExe+0x5d4>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fc99 	bl	80034fc <strncmp>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <vTaskCmdExe+0x3c8>
						PWM_Level_TIM3_Ch2(0);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f000 f99f 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002bd6:	4882      	ldr	r0, [pc, #520]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002bd8:	f000 faa0 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002bdc:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e0f2      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"20",2)==0){
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	2202      	movs	r2, #2
 8002bea:	4982      	ldr	r1, [pc, #520]	; (8002df4 <vTaskCmdExe+0x5d8>)
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fc85 	bl	80034fc <strncmp>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <vTaskCmdExe+0x3f2>
						PWM_Level_TIM3_Ch2(1212);
 8002bf8:	f240 40bc 	movw	r0, #1212	; 0x4bc
 8002bfc:	f000 f98a 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002c00:	4877      	ldr	r0, [pc, #476]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002c02:	f000 fa8b 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002c06:	4b77      	ldr	r3, [pc, #476]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e0dd      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"21",2)==0){
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	2202      	movs	r2, #2
 8002c14:	4978      	ldr	r1, [pc, #480]	; (8002df8 <vTaskCmdExe+0x5dc>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fc70 	bl	80034fc <strncmp>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10a      	bne.n	8002c38 <vTaskCmdExe+0x41c>
						PWM_Level_TIM3_Ch2(1273);
 8002c22:	f240 40f9 	movw	r0, #1273	; 0x4f9
 8002c26:	f000 f975 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002c2a:	486d      	ldr	r0, [pc, #436]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002c2c:	f000 fa76 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002c30:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e0c8      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"22",2)==0){
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	496f      	ldr	r1, [pc, #444]	; (8002dfc <vTaskCmdExe+0x5e0>)
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fc5b 	bl	80034fc <strncmp>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <vTaskCmdExe+0x446>
						PWM_Level_TIM3_Ch2(1333);
 8002c4c:	f240 5035 	movw	r0, #1333	; 0x535
 8002c50:	f000 f960 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002c54:	4862      	ldr	r0, [pc, #392]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002c56:	f000 fa61 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002c5a:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e0b3      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"23",2)==0){
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	2202      	movs	r2, #2
 8002c68:	4965      	ldr	r1, [pc, #404]	; (8002e00 <vTaskCmdExe+0x5e4>)
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fc46 	bl	80034fc <strncmp>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <vTaskCmdExe+0x470>
						PWM_Level_TIM3_Ch2(1394);
 8002c76:	f240 5072 	movw	r0, #1394	; 0x572
 8002c7a:	f000 f94b 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002c7e:	4858      	ldr	r0, [pc, #352]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002c80:	f000 fa4c 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002c84:	4b57      	ldr	r3, [pc, #348]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	e09e      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"24",2)==0){
 8002c8c:	f107 0308 	add.w	r3, r7, #8
 8002c90:	2202      	movs	r2, #2
 8002c92:	495c      	ldr	r1, [pc, #368]	; (8002e04 <vTaskCmdExe+0x5e8>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fc31 	bl	80034fc <strncmp>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <vTaskCmdExe+0x49a>
						PWM_Level_TIM3_Ch2(1455);
 8002ca0:	f240 50af 	movw	r0, #1455	; 0x5af
 8002ca4:	f000 f936 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002ca8:	484d      	ldr	r0, [pc, #308]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002caa:	f000 fa37 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002cae:	4b4d      	ldr	r3, [pc, #308]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e089      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"25",2)==0){
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4952      	ldr	r1, [pc, #328]	; (8002e08 <vTaskCmdExe+0x5ec>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fc1c 	bl	80034fc <strncmp>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <vTaskCmdExe+0x4c4>
						PWM_Level_TIM3_Ch2(1515);
 8002cca:	f240 50eb 	movw	r0, #1515	; 0x5eb
 8002cce:	f000 f921 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002cd2:	4843      	ldr	r0, [pc, #268]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002cd4:	f000 fa22 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e074      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"26",2)==0){
 8002ce0:	f107 0308 	add.w	r3, r7, #8
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	4949      	ldr	r1, [pc, #292]	; (8002e0c <vTaskCmdExe+0x5f0>)
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fc07 	bl	80034fc <strncmp>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <vTaskCmdExe+0x4ee>
						PWM_Level_TIM3_Ch2(1576);
 8002cf4:	f44f 60c5 	mov.w	r0, #1576	; 0x628
 8002cf8:	f000 f90c 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002cfc:	4838      	ldr	r0, [pc, #224]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002cfe:	f000 fa0d 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002d02:	4b38      	ldr	r3, [pc, #224]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
 8002d08:	e05f      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"27",2)==0){
 8002d0a:	f107 0308 	add.w	r3, r7, #8
 8002d0e:	2202      	movs	r2, #2
 8002d10:	493f      	ldr	r1, [pc, #252]	; (8002e10 <vTaskCmdExe+0x5f4>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fbf2 	bl	80034fc <strncmp>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <vTaskCmdExe+0x518>
						PWM_Level_TIM3_Ch2(1636);
 8002d1e:	f240 6064 	movw	r0, #1636	; 0x664
 8002d22:	f000 f8f7 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002d26:	482e      	ldr	r0, [pc, #184]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002d28:	f000 f9f8 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e04a      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"28",2)==0){
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4936      	ldr	r1, [pc, #216]	; (8002e14 <vTaskCmdExe+0x5f8>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fbdd 	bl	80034fc <strncmp>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <vTaskCmdExe+0x542>
						PWM_Level_TIM3_Ch2(1697);
 8002d48:	f240 60a1 	movw	r0, #1697	; 0x6a1
 8002d4c:	f000 f8e2 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002d50:	4823      	ldr	r0, [pc, #140]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002d52:	f000 f9e3 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e035      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"29",2)==0){
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	2202      	movs	r2, #2
 8002d64:	492c      	ldr	r1, [pc, #176]	; (8002e18 <vTaskCmdExe+0x5fc>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fbc8 	bl	80034fc <strncmp>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <vTaskCmdExe+0x56c>
						PWM_Level_TIM3_Ch2(1758);
 8002d72:	f240 60de 	movw	r0, #1758	; 0x6de
 8002d76:	f000 f8cd 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002d7a:	4819      	ldr	r0, [pc, #100]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002d7c:	f000 f9ce 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002d80:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e020      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
					if(strncmp(buffer,"30",2)==0){
 8002d88:	f107 0308 	add.w	r3, r7, #8
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4923      	ldr	r1, [pc, #140]	; (8002e1c <vTaskCmdExe+0x600>)
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fbb3 	bl	80034fc <strncmp>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <vTaskCmdExe+0x596>
						PWM_Level_TIM3_Ch2(1818);
 8002d9c:	f240 701a 	movw	r0, #1818	; 0x71a
 8002da0:	f000 f8b8 	bl	8002f14 <PWM_Level_TIM3_Ch2>
						USART1SendStr("---OK---\r\n");
 8002da4:	480e      	ldr	r0, [pc, #56]	; (8002de0 <vTaskCmdExe+0x5c4>)
 8002da6:	f000 f9b9 	bl	800311c <USART1SendStr>
						newCommandFlag=0;break;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e00b      	b.n	8002dca <vTaskCmdExe+0x5ae>
					}
				}
				if (newCommandFlag)
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d006      	beq.n	8002dc8 <vTaskCmdExe+0x5ac>
				{
					USART1SendStr("---UKNOWN COMMAND---\r\n");
 8002dba:	4819      	ldr	r0, [pc, #100]	; (8002e20 <vTaskCmdExe+0x604>)
 8002dbc:	f000 f9ae 	bl	800311c <USART1SendStr>
					newCommandFlag=0;break;
 8002dc0:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <vTaskCmdExe+0x5c8>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e000      	b.n	8002dca <vTaskCmdExe+0x5ae>
				}
				break;
 8002dc8:	bf00      	nop
			}

		}
		vTaskDelay(10);
 8002dca:	200a      	movs	r0, #10
 8002dcc:	f7fd ff6e 	bl	8000cac <vTaskDelay>
		if (newCommandFlag)
 8002dd0:	e549      	b.n	8002866 <vTaskCmdExe+0x4a>
 8002dd2:	bf00      	nop
 8002dd4:	2000001c 	.word	0x2000001c
 8002dd8:	200011d8 	.word	0x200011d8
 8002ddc:	20001208 	.word	0x20001208
 8002de0:	08003e34 	.word	0x08003e34
 8002de4:	20001214 	.word	0x20001214
 8002de8:	20000018 	.word	0x20000018
 8002dec:	200011e0 	.word	0x200011e0
 8002df0:	08003e48 	.word	0x08003e48
 8002df4:	08003e4c 	.word	0x08003e4c
 8002df8:	08003e50 	.word	0x08003e50
 8002dfc:	08003e54 	.word	0x08003e54
 8002e00:	08003e58 	.word	0x08003e58
 8002e04:	08003e5c 	.word	0x08003e5c
 8002e08:	08003e60 	.word	0x08003e60
 8002e0c:	08003e64 	.word	0x08003e64
 8002e10:	08003e68 	.word	0x08003e68
 8002e14:	08003e6c 	.word	0x08003e6c
 8002e18:	08003e70 	.word	0x08003e70
 8002e1c:	08003e74 	.word	0x08003e74
 8002e20:	08003e78 	.word	0x08003e78

08002e24 <PWM_Servo_Init_TIM3>:
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;


}
void PWM_Servo_Init_TIM3(){
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002e28:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002e34:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	4a25      	ldr	r2, [pc, #148]	; (8002ee8 <PWM_Servo_Init_TIM3+0xc4>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6193      	str	r3, [r2, #24]

	GPIOA->CRL &= ~GPIO_CRL_MODE6;
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e5e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002e62:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE6;
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a20      	ldr	r2, [pc, #128]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e6a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8002e6e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~GPIO_CRL_CNF6;
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e76:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002e7a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <PWM_Servo_Init_TIM3+0xc8>)
 8002e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e86:	6013      	str	r3, [r2, #0]


	TIM3->CR1 &= ~TIM_CR1_CEN;
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	6013      	str	r3, [r2, #0]
	TIM3->ARR = 2000;
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002e96:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 720 - 1;
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002e9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28


	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002eaa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002eae:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC1P;
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002ec2:	f023 0302 	bic.w	r3, r3, #2
 8002ec6:	6213      	str	r3, [r2, #32]
	TIM3->CR1 &= ~TIM_CR1_DIR;
 8002ec8:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002ece:	f023 0310 	bic.w	r3, r3, #16
 8002ed2:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <PWM_Servo_Init_TIM3+0xcc>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6013      	str	r3, [r2, #0]





}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010800 	.word	0x40010800
 8002ef0:	40000400 	.word	0x40000400

08002ef4 <PWM_Level_TIM3_Ch1>:


void PWM_Level_TIM3_Ch1(uint16_t microsec){
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = microsec;
 8002efe:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <PWM_Level_TIM3_Ch1+0x1c>)
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40000400 	.word	0x40000400

08002f14 <PWM_Level_TIM3_Ch2>:
void PWM_Level_TIM3_Ch2(uint16_t microsec){
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR2 = microsec;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <PWM_Level_TIM3_Ch2+0x1c>)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40000400 	.word	0x40000400

08002f34 <PWM_Power_Init_TIM3>:



}

void PWM_Power_Init_TIM3(){
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002f38:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4a2e      	ldr	r2, [pc, #184]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f3e:	f043 0302 	orr.w	r3, r3, #2
 8002f42:	61d3      	str	r3, [r2, #28]
		RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8002f44:	4b2c      	ldr	r3, [pc, #176]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6193      	str	r3, [r2, #24]
		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	4a28      	ldr	r2, [pc, #160]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f56:	f043 0308 	orr.w	r3, r3, #8
 8002f5a:	6193      	str	r3, [r2, #24]
		RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8002f5c:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a25      	ldr	r2, [pc, #148]	; (8002ff8 <PWM_Power_Init_TIM3+0xc4>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6193      	str	r3, [r2, #24]


		GPIOA->CRL &= ~GPIO_CRL_MODE7;   //  PA7
 8002f68:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f6e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002f72:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |= GPIO_CRL_MODE7;
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f7a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8002f7e:	6013      	str	r3, [r2, #0]
		GPIOA->CRL &= ~GPIO_CRL_CNF7;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002f8a:	6013      	str	r3, [r2, #0]
		GPIOA->CRL |= GPIO_CRL_CNF7_1;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1a      	ldr	r2, [pc, #104]	; (8002ffc <PWM_Power_Init_TIM3+0xc8>)
 8002f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f96:	6013      	str	r3, [r2, #0]


		TIM3->CR1 &= ~TIM_CR1_CEN;
 8002f98:	4b19      	ldr	r3, [pc, #100]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]

		TIM3->ARR = 2000;
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fa6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->PSC = 720 - 1;
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fae:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28

		TIM3->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fba:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8002fbe:	6193      	str	r3, [r2, #24]
		TIM3->CCER |= TIM_CCER_CC2E;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fc6:	f043 0310 	orr.w	r3, r3, #16
 8002fca:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~TIM_CCER_CC2P;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fd2:	f023 0320 	bic.w	r3, r3, #32
 8002fd6:	6213      	str	r3, [r2, #32]
		TIM3->CR1 &= ~TIM_CR1_DIR;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a08      	ldr	r2, [pc, #32]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fde:	f023 0310 	bic.w	r3, r3, #16
 8002fe2:	6013      	str	r3, [r2, #0]
		TIM3->CR1 |= TIM_CR1_CEN;
 8002fe4:	4b06      	ldr	r3, [pc, #24]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a05      	ldr	r2, [pc, #20]	; (8003000 <PWM_Power_Init_TIM3+0xcc>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40010800 	.word	0x40010800
 8003000:	40000400 	.word	0x40000400

08003004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	2b00      	cmp	r3, #0
 8003014:	db0b      	blt.n	800302e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	f003 021f 	and.w	r2, r3, #31
 800301c:	4906      	ldr	r1, [pc, #24]	; (8003038 <__NVIC_EnableIRQ+0x34>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2001      	movs	r0, #1
 8003026:	fa00 f202 	lsl.w	r2, r0, r2
 800302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100

0800303c <USART1_GPIO_Init>:

}



void USART1_GPIO_Init(void){
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <USART1_GPIO_Init+0x60>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <USART1_GPIO_Init+0x60>)
 8003046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <USART1_GPIO_Init+0x60>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <USART1_GPIO_Init+0x60>)
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <USART1_GPIO_Init+0x60>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <USART1_GPIO_Init+0x60>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6193      	str	r3, [r2, #24]
	// UART ports
	GPIOA->CRH |= GPIO_CRH_MODE9; // PA9    - output      TX
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <USART1_GPIO_Init+0x64>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a0d      	ldr	r2, [pc, #52]	; (80030a0 <USART1_GPIO_Init+0x64>)
 800306a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800306e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF9_1;  //PA9   - GP out PP   TX
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <USART1_GPIO_Init+0x64>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <USART1_GPIO_Init+0x64>)
 8003076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~ GPIO_CRH_MODE10; // PA10  - input                     RX
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <USART1_GPIO_Init+0x64>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <USART1_GPIO_Init+0x64>)
 8003082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003086:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF10_0;  //PA10  - Alternative input float   RX
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <USART1_GPIO_Init+0x64>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <USART1_GPIO_Init+0x64>)
 800308e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003092:	6053      	str	r3, [r2, #4]

}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	40021000 	.word	0x40021000
 80030a0:	40010800 	.word	0x40010800

080030a4 <USART1_Mode_Init>:


void USART1_Mode_Init(void){
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0

	USART1->BRR =  0x271; // 625   -- 115200 72MHz
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <USART1_Mode_Init+0x48>)
 80030aa:	f240 2271 	movw	r2, #625	; 0x271
 80030ae:	609a      	str	r2, [r3, #8]

	USART1->CR1 |= USART_CR1_UE;
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <USART1_Mode_Init+0x48>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <USART1_Mode_Init+0x48>)
 80030b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030ba:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_TE;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <USART1_Mode_Init+0x48>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <USART1_Mode_Init+0x48>)
 80030c2:	f043 0308 	orr.w	r3, r3, #8
 80030c6:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RE;
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <USART1_Mode_Init+0x48>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a07      	ldr	r2, [pc, #28]	; (80030ec <USART1_Mode_Init+0x48>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RXNEIE;
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <USART1_Mode_Init+0x48>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <USART1_Mode_Init+0x48>)
 80030da:	f043 0320 	orr.w	r3, r3, #32
 80030de:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);
 80030e0:	2025      	movs	r0, #37	; 0x25
 80030e2:	f7ff ff8f 	bl	8003004 <__NVIC_EnableIRQ>



}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40013800 	.word	0x40013800

080030f0 <USART1SendChar>:


void USART1SendChar(char symb){
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	71fb      	strb	r3, [r7, #7]
	while (! (USART1->SR & USART_SR_TC));
 80030fa:	bf00      	nop
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <USART1SendChar+0x28>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f9      	beq.n	80030fc <USART1SendChar+0xc>
	USART1->DR = symb;
 8003108:	4a03      	ldr	r2, [pc, #12]	; (8003118 <USART1SendChar+0x28>)
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	6053      	str	r3, [r2, #4]

}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	40013800 	.word	0x40013800

0800311c <USART1SendStr>:
void USART1SendStr(char* str){
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
	while (str[i]){
 8003128:	e009      	b.n	800313e <USART1SendStr+0x22>
		USART1SendChar(str[i++]);
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	73fa      	strb	r2, [r7, #15]
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ffd9 	bl	80030f0 <USART1SendChar>
	while (str[i]){
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ef      	bne.n	800312a <USART1SendStr+0xe>
	}

}
 800314a:	bf00      	nop
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <main>:
TaskHandle_t xPWR_Handle;
TaskHandle_t xEXE_Handle;



int main (void){
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af02      	add	r7, sp, #8


	RCC_PLL_Init();
 800315a:	f7ff f9f1 	bl	8002540 <RCC_PLL_Init>
	xTaskCreate(vTaskHello, "Hello", 32, NULL, 3, &xINFO_Handle);
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <main+0x78>)
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2303      	movs	r3, #3
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2300      	movs	r3, #0
 8003168:	2220      	movs	r2, #32
 800316a:	4919      	ldr	r1, [pc, #100]	; (80031d0 <main+0x7c>)
 800316c:	4819      	ldr	r0, [pc, #100]	; (80031d4 <main+0x80>)
 800316e:	f7fd fc74 	bl	8000a5a <xTaskCreate>
	xTaskCreate(vTaskBlink, "Led Blink 13", 32, NULL, 3, &xBLINK_Handle);
 8003172:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <main+0x84>)
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2303      	movs	r3, #3
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2300      	movs	r3, #0
 800317c:	2220      	movs	r2, #32
 800317e:	4917      	ldr	r1, [pc, #92]	; (80031dc <main+0x88>)
 8003180:	4817      	ldr	r0, [pc, #92]	; (80031e0 <main+0x8c>)
 8003182:	f7fd fc6a 	bl	8000a5a <xTaskCreate>

	xTaskCreate(vTaskADCConvert, "ADC", 128, NULL, 2, &xADC_Handle);
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <main+0x90>)
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2302      	movs	r3, #2
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	4915      	ldr	r1, [pc, #84]	; (80031e8 <main+0x94>)
 8003194:	4815      	ldr	r0, [pc, #84]	; (80031ec <main+0x98>)
 8003196:	f7fd fc60 	bl	8000a5a <xTaskCreate>
	xTaskCreate(vTaskServo, "Servo", 32, NULL, 2, &xSERVO_Handle);
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <main+0x9c>)
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2300      	movs	r3, #0
 80031a4:	2220      	movs	r2, #32
 80031a6:	4913      	ldr	r1, [pc, #76]	; (80031f4 <main+0xa0>)
 80031a8:	4813      	ldr	r0, [pc, #76]	; (80031f8 <main+0xa4>)
 80031aa:	f7fd fc56 	bl	8000a5a <xTaskCreate>



	xTaskCreate(vTaskCmdExe, "USART receive command",256, NULL, 1, &xEXE_Handle);
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <main+0xa8>)
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2301      	movs	r3, #1
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031bc:	4910      	ldr	r1, [pc, #64]	; (8003200 <main+0xac>)
 80031be:	4811      	ldr	r0, [pc, #68]	; (8003204 <main+0xb0>)
 80031c0:	f7fd fc4b 	bl	8000a5a <xTaskCreate>




	vTaskStartScheduler();
 80031c4:	f7fd fece 	bl	8000f64 <vTaskStartScheduler>

	while (1){
 80031c8:	e7fe      	b.n	80031c8 <main+0x74>
 80031ca:	bf00      	nop
 80031cc:	20001220 	.word	0x20001220
 80031d0:	08003e90 	.word	0x08003e90
 80031d4:	08002685 	.word	0x08002685
 80031d8:	20001228 	.word	0x20001228
 80031dc:	08003e98 	.word	0x08003e98
 80031e0:	08002629 	.word	0x08002629
 80031e4:	20001224 	.word	0x20001224
 80031e8:	08003ea8 	.word	0x08003ea8
 80031ec:	080026a9 	.word	0x080026a9
 80031f0:	20001248 	.word	0x20001248
 80031f4:	08003eac 	.word	0x08003eac
 80031f8:	080027b5 	.word	0x080027b5
 80031fc:	20001244 	.word	0x20001244
 8003200:	08003eb4 	.word	0x08003eb4
 8003204:	0800281d 	.word	0x0800281d

08003208 <USART1_IRQHandler>:

}



void USART1_IRQHandler(){
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0

	if (USART1->SR & USART_SR_RXNE)
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <USART1_IRQHandler+0xc4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d053      	beq.n	80032c2 <USART1_IRQHandler+0xba>
	{
		data=USART1->DR;
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <USART1_IRQHandler+0xc4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <USART1_IRQHandler+0xc8>)
 8003222:	701a      	strb	r2, [r3, #0]
		if (data=='\r' || data=='\n' || data==0 || indexC==sizeof(commandStrBuf)-1)
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <USART1_IRQHandler+0xc8>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b0d      	cmp	r3, #13
 800322a:	d00b      	beq.n	8003244 <USART1_IRQHandler+0x3c>
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <USART1_IRQHandler+0xc8>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b0a      	cmp	r3, #10
 8003232:	d007      	beq.n	8003244 <USART1_IRQHandler+0x3c>
 8003234:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <USART1_IRQHandler+0xc8>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <USART1_IRQHandler+0x3c>
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <USART1_IRQHandler+0xcc>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b13      	cmp	r3, #19
 8003242:	d12d      	bne.n	80032a0 <USART1_IRQHandler+0x98>
		{
			if (!newCommandFlag){
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <USART1_IRQHandler+0xd0>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11d      	bne.n	8003288 <USART1_IRQHandler+0x80>
				int i=0;
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
				memset(commandStr,0,sizeof(commandStr));
 8003250:	2214      	movs	r2, #20
 8003252:	2100      	movs	r1, #0
 8003254:	4821      	ldr	r0, [pc, #132]	; (80032dc <USART1_IRQHandler+0xd4>)
 8003256:	f000 f928 	bl	80034aa <memset>
				while(commandStrBuf[i]){
 800325a:	e00b      	b.n	8003274 <USART1_IRQHandler+0x6c>
					commandStr[i]=commandStrBuf[i];
 800325c:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <USART1_IRQHandler+0xd8>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	7819      	ldrb	r1, [r3, #0]
 8003264:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <USART1_IRQHandler+0xd4>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	460a      	mov	r2, r1
 800326c:	701a      	strb	r2, [r3, #0]
					i++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3301      	adds	r3, #1
 8003272:	607b      	str	r3, [r7, #4]
				while(commandStrBuf[i]){
 8003274:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <USART1_IRQHandler+0xd8>)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ed      	bne.n	800325c <USART1_IRQHandler+0x54>
				}
				newCommandFlag=1;
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <USART1_IRQHandler+0xd0>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e002      	b.n	800328e <USART1_IRQHandler+0x86>
			}
			else{
				USART1SendStr("---REPEAT---");
 8003288:	4816      	ldr	r0, [pc, #88]	; (80032e4 <USART1_IRQHandler+0xdc>)
 800328a:	f7ff ff47 	bl	800311c <USART1SendStr>
			}
			memset(commandStrBuf,0,sizeof(commandStrBuf));
 800328e:	2214      	movs	r2, #20
 8003290:	2100      	movs	r1, #0
 8003292:	4813      	ldr	r0, [pc, #76]	; (80032e0 <USART1_IRQHandler+0xd8>)
 8003294:	f000 f909 	bl	80034aa <memset>
			indexC=0;
 8003298:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <USART1_IRQHandler+0xcc>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e00a      	b.n	80032b6 <USART1_IRQHandler+0xae>
		}
		else {
			commandStrBuf[indexC++]=data;
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <USART1_IRQHandler+0xcc>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	b2d1      	uxtb	r1, r2
 80032a8:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <USART1_IRQHandler+0xcc>)
 80032aa:	7011      	strb	r1, [r2, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <USART1_IRQHandler+0xc8>)
 80032b0:	7819      	ldrb	r1, [r3, #0]
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <USART1_IRQHandler+0xd8>)
 80032b4:	5499      	strb	r1, [r3, r2]
		}
		USART1->SR &= ~USART_SR_RXNE;
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <USART1_IRQHandler+0xc4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <USART1_IRQHandler+0xc4>)
 80032bc:	f023 0320 	bic.w	r3, r3, #32
 80032c0:	6013      	str	r3, [r2, #0]
	}
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40013800 	.word	0x40013800
 80032d0:	2000122c 	.word	0x2000122c
 80032d4:	2000121c 	.word	0x2000121c
 80032d8:	20001214 	.word	0x20001214
 80032dc:	200011d8 	.word	0x200011d8
 80032e0:	20001230 	.word	0x20001230
 80032e4:	08003ecc 	.word	0x08003ecc

080032e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f8:	e7fe      	b.n	80032f8 <HardFault_Handler+0x4>

080032fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fe:	e7fe      	b.n	80032fe <MemManage_Handler+0x4>

08003300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <BusFault_Handler+0x4>

08003306 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <UsageFault_Handler+0x4>

0800330c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800331c:	f7fc ff18 	bl	8000150 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003320:	f7fe f9e6 	bl	80016f0 <xTaskGetSchedulerState>
 8003324:	4603      	mov	r3, r0
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800332a:	f7fe fd85 	bl	8001e38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <_sbrk+0x50>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <_sbrk+0x16>
		heap_end = &end;
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <_sbrk+0x50>)
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <_sbrk+0x54>)
 8003348:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <_sbrk+0x50>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <_sbrk+0x50>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	466a      	mov	r2, sp
 800335a:	4293      	cmp	r3, r2
 800335c:	d907      	bls.n	800336e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800335e:	f000 f86f 	bl	8003440 <__errno>
 8003362:	4602      	mov	r2, r0
 8003364:	230c      	movs	r3, #12
 8003366:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800336c:	e006      	b.n	800337c <_sbrk+0x48>
	}

	heap_end += incr;
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <_sbrk+0x50>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	4a03      	ldr	r2, [pc, #12]	; (8003384 <_sbrk+0x50>)
 8003378:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200011c8 	.word	0x200011c8
 8003388:	20001250 	.word	0x20001250

0800338c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <SystemInit+0x5c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <SystemInit+0x5c>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <SystemInit+0x5c>)
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4911      	ldr	r1, [pc, #68]	; (80033e8 <SystemInit+0x5c>)
 80033a2:	4b12      	ldr	r3, [pc, #72]	; (80033ec <SystemInit+0x60>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <SystemInit+0x5c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <SystemInit+0x5c>)
 80033ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <SystemInit+0x5c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <SystemInit+0x5c>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <SystemInit+0x5c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <SystemInit+0x5c>)
 80033ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <SystemInit+0x5c>)
 80033d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SystemInit+0x64>)
 80033da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033de:	609a      	str	r2, [r3, #8]
#endif 
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	40021000 	.word	0x40021000
 80033ec:	f8ff0000 	.word	0xf8ff0000
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033f6:	e003      	b.n	8003400 <LoopCopyDataInit>

080033f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80033fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033fe:	3104      	adds	r1, #4

08003400 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003400:	480a      	ldr	r0, [pc, #40]	; (800342c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003404:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003406:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003408:	d3f6      	bcc.n	80033f8 <CopyDataInit>
  ldr r2, =_sbss
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800340c:	e002      	b.n	8003414 <LoopFillZerobss>

0800340e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003410:	f842 3b04 	str.w	r3, [r2], #4

08003414 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003416:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003418:	d3f9      	bcc.n	800340e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800341a:	f7ff ffb7 	bl	800338c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341e:	f000 f815 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003422:	f7ff fe97 	bl	8003154 <main>
  bx lr
 8003426:	4770      	bx	lr
  ldr r3, =_sidata
 8003428:	08003f14 	.word	0x08003f14
  ldr r0, =_sdata
 800342c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003430:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8003434:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8003438:	20001250 	.word	0x20001250

0800343c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800343c:	e7fe      	b.n	800343c <ADC1_2_IRQHandler>
	...

08003440 <__errno>:
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <__errno+0x8>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000034 	.word	0x20000034

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	2500      	movs	r5, #0
 8003450:	4e0c      	ldr	r6, [pc, #48]	; (8003484 <__libc_init_array+0x38>)
 8003452:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <__libc_init_array+0x3c>)
 8003454:	1ba4      	subs	r4, r4, r6
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	42a5      	cmp	r5, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	f000 fc5e 	bl	8003d1c <_init>
 8003460:	2500      	movs	r5, #0
 8003462:	4e0a      	ldr	r6, [pc, #40]	; (800348c <__libc_init_array+0x40>)
 8003464:	4c0a      	ldr	r4, [pc, #40]	; (8003490 <__libc_init_array+0x44>)
 8003466:	1ba4      	subs	r4, r4, r6
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	42a5      	cmp	r5, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003474:	4798      	blx	r3
 8003476:	3501      	adds	r5, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800347e:	4798      	blx	r3
 8003480:	3501      	adds	r5, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	08003f0c 	.word	0x08003f0c
 8003488:	08003f0c 	.word	0x08003f0c
 800348c:	08003f0c 	.word	0x08003f0c
 8003490:	08003f10 	.word	0x08003f10

08003494 <memcpy>:
 8003494:	b510      	push	{r4, lr}
 8003496:	1e43      	subs	r3, r0, #1
 8003498:	440a      	add	r2, r1
 800349a:	4291      	cmp	r1, r2
 800349c:	d100      	bne.n	80034a0 <memcpy+0xc>
 800349e:	bd10      	pop	{r4, pc}
 80034a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034a8:	e7f7      	b.n	800349a <memcpy+0x6>

080034aa <memset>:
 80034aa:	4603      	mov	r3, r0
 80034ac:	4402      	add	r2, r0
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d100      	bne.n	80034b4 <memset+0xa>
 80034b2:	4770      	bx	lr
 80034b4:	f803 1b01 	strb.w	r1, [r3], #1
 80034b8:	e7f9      	b.n	80034ae <memset+0x4>
	...

080034bc <siprintf>:
 80034bc:	b40e      	push	{r1, r2, r3}
 80034be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034c2:	b500      	push	{lr}
 80034c4:	b09c      	sub	sp, #112	; 0x70
 80034c6:	ab1d      	add	r3, sp, #116	; 0x74
 80034c8:	9002      	str	r0, [sp, #8]
 80034ca:	9006      	str	r0, [sp, #24]
 80034cc:	9107      	str	r1, [sp, #28]
 80034ce:	9104      	str	r1, [sp, #16]
 80034d0:	4808      	ldr	r0, [pc, #32]	; (80034f4 <siprintf+0x38>)
 80034d2:	4909      	ldr	r1, [pc, #36]	; (80034f8 <siprintf+0x3c>)
 80034d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80034d8:	9105      	str	r1, [sp, #20]
 80034da:	6800      	ldr	r0, [r0, #0]
 80034dc:	a902      	add	r1, sp, #8
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	f000 f88e 	bl	8003600 <_svfiprintf_r>
 80034e4:	2200      	movs	r2, #0
 80034e6:	9b02      	ldr	r3, [sp, #8]
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	b01c      	add	sp, #112	; 0x70
 80034ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80034f0:	b003      	add	sp, #12
 80034f2:	4770      	bx	lr
 80034f4:	20000034 	.word	0x20000034
 80034f8:	ffff0208 	.word	0xffff0208

080034fc <strncmp>:
 80034fc:	b510      	push	{r4, lr}
 80034fe:	b16a      	cbz	r2, 800351c <strncmp+0x20>
 8003500:	3901      	subs	r1, #1
 8003502:	1884      	adds	r4, r0, r2
 8003504:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003508:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <strncmp+0x1c>
 8003510:	42a0      	cmp	r0, r4
 8003512:	d001      	beq.n	8003518 <strncmp+0x1c>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f5      	bne.n	8003504 <strncmp+0x8>
 8003518:	1a98      	subs	r0, r3, r2
 800351a:	bd10      	pop	{r4, pc}
 800351c:	4610      	mov	r0, r2
 800351e:	e7fc      	b.n	800351a <strncmp+0x1e>

08003520 <strncpy>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4604      	mov	r4, r0
 8003524:	3901      	subs	r1, #1
 8003526:	b902      	cbnz	r2, 800352a <strncpy+0xa>
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	4623      	mov	r3, r4
 800352c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003530:	1e56      	subs	r6, r2, #1
 8003532:	f803 5b01 	strb.w	r5, [r3], #1
 8003536:	b92d      	cbnz	r5, 8003544 <strncpy+0x24>
 8003538:	4414      	add	r4, r2
 800353a:	42a3      	cmp	r3, r4
 800353c:	d0f4      	beq.n	8003528 <strncpy+0x8>
 800353e:	f803 5b01 	strb.w	r5, [r3], #1
 8003542:	e7fa      	b.n	800353a <strncpy+0x1a>
 8003544:	461c      	mov	r4, r3
 8003546:	4632      	mov	r2, r6
 8003548:	e7ed      	b.n	8003526 <strncpy+0x6>

0800354a <__ssputs_r>:
 800354a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354e:	688e      	ldr	r6, [r1, #8]
 8003550:	4682      	mov	sl, r0
 8003552:	429e      	cmp	r6, r3
 8003554:	460c      	mov	r4, r1
 8003556:	4690      	mov	r8, r2
 8003558:	4699      	mov	r9, r3
 800355a:	d837      	bhi.n	80035cc <__ssputs_r+0x82>
 800355c:	898a      	ldrh	r2, [r1, #12]
 800355e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003562:	d031      	beq.n	80035c8 <__ssputs_r+0x7e>
 8003564:	2302      	movs	r3, #2
 8003566:	6825      	ldr	r5, [r4, #0]
 8003568:	6909      	ldr	r1, [r1, #16]
 800356a:	1a6f      	subs	r7, r5, r1
 800356c:	6965      	ldr	r5, [r4, #20]
 800356e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003572:	fb95 f5f3 	sdiv	r5, r5, r3
 8003576:	f109 0301 	add.w	r3, r9, #1
 800357a:	443b      	add	r3, r7
 800357c:	429d      	cmp	r5, r3
 800357e:	bf38      	it	cc
 8003580:	461d      	movcc	r5, r3
 8003582:	0553      	lsls	r3, r2, #21
 8003584:	d530      	bpl.n	80035e8 <__ssputs_r+0x9e>
 8003586:	4629      	mov	r1, r5
 8003588:	f000 fb2e 	bl	8003be8 <_malloc_r>
 800358c:	4606      	mov	r6, r0
 800358e:	b950      	cbnz	r0, 80035a6 <__ssputs_r+0x5c>
 8003590:	230c      	movs	r3, #12
 8003592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003596:	f8ca 3000 	str.w	r3, [sl]
 800359a:	89a3      	ldrh	r3, [r4, #12]
 800359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a0:	81a3      	strh	r3, [r4, #12]
 80035a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a6:	463a      	mov	r2, r7
 80035a8:	6921      	ldr	r1, [r4, #16]
 80035aa:	f7ff ff73 	bl	8003494 <memcpy>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	6126      	str	r6, [r4, #16]
 80035bc:	443e      	add	r6, r7
 80035be:	6026      	str	r6, [r4, #0]
 80035c0:	464e      	mov	r6, r9
 80035c2:	6165      	str	r5, [r4, #20]
 80035c4:	1bed      	subs	r5, r5, r7
 80035c6:	60a5      	str	r5, [r4, #8]
 80035c8:	454e      	cmp	r6, r9
 80035ca:	d900      	bls.n	80035ce <__ssputs_r+0x84>
 80035cc:	464e      	mov	r6, r9
 80035ce:	4632      	mov	r2, r6
 80035d0:	4641      	mov	r1, r8
 80035d2:	6820      	ldr	r0, [r4, #0]
 80035d4:	f000 faa2 	bl	8003b1c <memmove>
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	2000      	movs	r0, #0
 80035dc:	1b9b      	subs	r3, r3, r6
 80035de:	60a3      	str	r3, [r4, #8]
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	441e      	add	r6, r3
 80035e4:	6026      	str	r6, [r4, #0]
 80035e6:	e7dc      	b.n	80035a2 <__ssputs_r+0x58>
 80035e8:	462a      	mov	r2, r5
 80035ea:	f000 fb57 	bl	8003c9c <_realloc_r>
 80035ee:	4606      	mov	r6, r0
 80035f0:	2800      	cmp	r0, #0
 80035f2:	d1e2      	bne.n	80035ba <__ssputs_r+0x70>
 80035f4:	6921      	ldr	r1, [r4, #16]
 80035f6:	4650      	mov	r0, sl
 80035f8:	f000 faaa 	bl	8003b50 <_free_r>
 80035fc:	e7c8      	b.n	8003590 <__ssputs_r+0x46>
	...

08003600 <_svfiprintf_r>:
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	461d      	mov	r5, r3
 8003606:	898b      	ldrh	r3, [r1, #12]
 8003608:	b09d      	sub	sp, #116	; 0x74
 800360a:	061f      	lsls	r7, r3, #24
 800360c:	4680      	mov	r8, r0
 800360e:	460c      	mov	r4, r1
 8003610:	4616      	mov	r6, r2
 8003612:	d50f      	bpl.n	8003634 <_svfiprintf_r+0x34>
 8003614:	690b      	ldr	r3, [r1, #16]
 8003616:	b96b      	cbnz	r3, 8003634 <_svfiprintf_r+0x34>
 8003618:	2140      	movs	r1, #64	; 0x40
 800361a:	f000 fae5 	bl	8003be8 <_malloc_r>
 800361e:	6020      	str	r0, [r4, #0]
 8003620:	6120      	str	r0, [r4, #16]
 8003622:	b928      	cbnz	r0, 8003630 <_svfiprintf_r+0x30>
 8003624:	230c      	movs	r3, #12
 8003626:	f8c8 3000 	str.w	r3, [r8]
 800362a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800362e:	e0c8      	b.n	80037c2 <_svfiprintf_r+0x1c2>
 8003630:	2340      	movs	r3, #64	; 0x40
 8003632:	6163      	str	r3, [r4, #20]
 8003634:	2300      	movs	r3, #0
 8003636:	9309      	str	r3, [sp, #36]	; 0x24
 8003638:	2320      	movs	r3, #32
 800363a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800363e:	2330      	movs	r3, #48	; 0x30
 8003640:	f04f 0b01 	mov.w	fp, #1
 8003644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003648:	9503      	str	r5, [sp, #12]
 800364a:	4637      	mov	r7, r6
 800364c:	463d      	mov	r5, r7
 800364e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003652:	b10b      	cbz	r3, 8003658 <_svfiprintf_r+0x58>
 8003654:	2b25      	cmp	r3, #37	; 0x25
 8003656:	d13e      	bne.n	80036d6 <_svfiprintf_r+0xd6>
 8003658:	ebb7 0a06 	subs.w	sl, r7, r6
 800365c:	d00b      	beq.n	8003676 <_svfiprintf_r+0x76>
 800365e:	4653      	mov	r3, sl
 8003660:	4632      	mov	r2, r6
 8003662:	4621      	mov	r1, r4
 8003664:	4640      	mov	r0, r8
 8003666:	f7ff ff70 	bl	800354a <__ssputs_r>
 800366a:	3001      	adds	r0, #1
 800366c:	f000 80a4 	beq.w	80037b8 <_svfiprintf_r+0x1b8>
 8003670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003672:	4453      	add	r3, sl
 8003674:	9309      	str	r3, [sp, #36]	; 0x24
 8003676:	783b      	ldrb	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 809d 	beq.w	80037b8 <_svfiprintf_r+0x1b8>
 800367e:	2300      	movs	r3, #0
 8003680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003688:	9304      	str	r3, [sp, #16]
 800368a:	9307      	str	r3, [sp, #28]
 800368c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003690:	931a      	str	r3, [sp, #104]	; 0x68
 8003692:	462f      	mov	r7, r5
 8003694:	2205      	movs	r2, #5
 8003696:	f817 1b01 	ldrb.w	r1, [r7], #1
 800369a:	4850      	ldr	r0, [pc, #320]	; (80037dc <_svfiprintf_r+0x1dc>)
 800369c:	f000 fa30 	bl	8003b00 <memchr>
 80036a0:	9b04      	ldr	r3, [sp, #16]
 80036a2:	b9d0      	cbnz	r0, 80036da <_svfiprintf_r+0xda>
 80036a4:	06d9      	lsls	r1, r3, #27
 80036a6:	bf44      	itt	mi
 80036a8:	2220      	movmi	r2, #32
 80036aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036ae:	071a      	lsls	r2, r3, #28
 80036b0:	bf44      	itt	mi
 80036b2:	222b      	movmi	r2, #43	; 0x2b
 80036b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036b8:	782a      	ldrb	r2, [r5, #0]
 80036ba:	2a2a      	cmp	r2, #42	; 0x2a
 80036bc:	d015      	beq.n	80036ea <_svfiprintf_r+0xea>
 80036be:	462f      	mov	r7, r5
 80036c0:	2000      	movs	r0, #0
 80036c2:	250a      	movs	r5, #10
 80036c4:	9a07      	ldr	r2, [sp, #28]
 80036c6:	4639      	mov	r1, r7
 80036c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036cc:	3b30      	subs	r3, #48	; 0x30
 80036ce:	2b09      	cmp	r3, #9
 80036d0:	d94d      	bls.n	800376e <_svfiprintf_r+0x16e>
 80036d2:	b1b8      	cbz	r0, 8003704 <_svfiprintf_r+0x104>
 80036d4:	e00f      	b.n	80036f6 <_svfiprintf_r+0xf6>
 80036d6:	462f      	mov	r7, r5
 80036d8:	e7b8      	b.n	800364c <_svfiprintf_r+0x4c>
 80036da:	4a40      	ldr	r2, [pc, #256]	; (80037dc <_svfiprintf_r+0x1dc>)
 80036dc:	463d      	mov	r5, r7
 80036de:	1a80      	subs	r0, r0, r2
 80036e0:	fa0b f000 	lsl.w	r0, fp, r0
 80036e4:	4318      	orrs	r0, r3
 80036e6:	9004      	str	r0, [sp, #16]
 80036e8:	e7d3      	b.n	8003692 <_svfiprintf_r+0x92>
 80036ea:	9a03      	ldr	r2, [sp, #12]
 80036ec:	1d11      	adds	r1, r2, #4
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	9103      	str	r1, [sp, #12]
 80036f2:	2a00      	cmp	r2, #0
 80036f4:	db01      	blt.n	80036fa <_svfiprintf_r+0xfa>
 80036f6:	9207      	str	r2, [sp, #28]
 80036f8:	e004      	b.n	8003704 <_svfiprintf_r+0x104>
 80036fa:	4252      	negs	r2, r2
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	9207      	str	r2, [sp, #28]
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	783b      	ldrb	r3, [r7, #0]
 8003706:	2b2e      	cmp	r3, #46	; 0x2e
 8003708:	d10c      	bne.n	8003724 <_svfiprintf_r+0x124>
 800370a:	787b      	ldrb	r3, [r7, #1]
 800370c:	2b2a      	cmp	r3, #42	; 0x2a
 800370e:	d133      	bne.n	8003778 <_svfiprintf_r+0x178>
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	3702      	adds	r7, #2
 8003714:	1d1a      	adds	r2, r3, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	9203      	str	r2, [sp, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	bfb8      	it	lt
 800371e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003722:	9305      	str	r3, [sp, #20]
 8003724:	4d2e      	ldr	r5, [pc, #184]	; (80037e0 <_svfiprintf_r+0x1e0>)
 8003726:	2203      	movs	r2, #3
 8003728:	7839      	ldrb	r1, [r7, #0]
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f9e8 	bl	8003b00 <memchr>
 8003730:	b138      	cbz	r0, 8003742 <_svfiprintf_r+0x142>
 8003732:	2340      	movs	r3, #64	; 0x40
 8003734:	1b40      	subs	r0, r0, r5
 8003736:	fa03 f000 	lsl.w	r0, r3, r0
 800373a:	9b04      	ldr	r3, [sp, #16]
 800373c:	3701      	adds	r7, #1
 800373e:	4303      	orrs	r3, r0
 8003740:	9304      	str	r3, [sp, #16]
 8003742:	7839      	ldrb	r1, [r7, #0]
 8003744:	2206      	movs	r2, #6
 8003746:	4827      	ldr	r0, [pc, #156]	; (80037e4 <_svfiprintf_r+0x1e4>)
 8003748:	1c7e      	adds	r6, r7, #1
 800374a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800374e:	f000 f9d7 	bl	8003b00 <memchr>
 8003752:	2800      	cmp	r0, #0
 8003754:	d038      	beq.n	80037c8 <_svfiprintf_r+0x1c8>
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <_svfiprintf_r+0x1e8>)
 8003758:	bb13      	cbnz	r3, 80037a0 <_svfiprintf_r+0x1a0>
 800375a:	9b03      	ldr	r3, [sp, #12]
 800375c:	3307      	adds	r3, #7
 800375e:	f023 0307 	bic.w	r3, r3, #7
 8003762:	3308      	adds	r3, #8
 8003764:	9303      	str	r3, [sp, #12]
 8003766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003768:	444b      	add	r3, r9
 800376a:	9309      	str	r3, [sp, #36]	; 0x24
 800376c:	e76d      	b.n	800364a <_svfiprintf_r+0x4a>
 800376e:	fb05 3202 	mla	r2, r5, r2, r3
 8003772:	2001      	movs	r0, #1
 8003774:	460f      	mov	r7, r1
 8003776:	e7a6      	b.n	80036c6 <_svfiprintf_r+0xc6>
 8003778:	2300      	movs	r3, #0
 800377a:	250a      	movs	r5, #10
 800377c:	4619      	mov	r1, r3
 800377e:	3701      	adds	r7, #1
 8003780:	9305      	str	r3, [sp, #20]
 8003782:	4638      	mov	r0, r7
 8003784:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003788:	3a30      	subs	r2, #48	; 0x30
 800378a:	2a09      	cmp	r2, #9
 800378c:	d903      	bls.n	8003796 <_svfiprintf_r+0x196>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0c8      	beq.n	8003724 <_svfiprintf_r+0x124>
 8003792:	9105      	str	r1, [sp, #20]
 8003794:	e7c6      	b.n	8003724 <_svfiprintf_r+0x124>
 8003796:	fb05 2101 	mla	r1, r5, r1, r2
 800379a:	2301      	movs	r3, #1
 800379c:	4607      	mov	r7, r0
 800379e:	e7f0      	b.n	8003782 <_svfiprintf_r+0x182>
 80037a0:	ab03      	add	r3, sp, #12
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4622      	mov	r2, r4
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <_svfiprintf_r+0x1ec>)
 80037a8:	a904      	add	r1, sp, #16
 80037aa:	4640      	mov	r0, r8
 80037ac:	f3af 8000 	nop.w
 80037b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80037b4:	4681      	mov	r9, r0
 80037b6:	d1d6      	bne.n	8003766 <_svfiprintf_r+0x166>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	065b      	lsls	r3, r3, #25
 80037bc:	f53f af35 	bmi.w	800362a <_svfiprintf_r+0x2a>
 80037c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037c2:	b01d      	add	sp, #116	; 0x74
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c8:	ab03      	add	r3, sp, #12
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4622      	mov	r2, r4
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <_svfiprintf_r+0x1ec>)
 80037d0:	a904      	add	r1, sp, #16
 80037d2:	4640      	mov	r0, r8
 80037d4:	f000 f882 	bl	80038dc <_printf_i>
 80037d8:	e7ea      	b.n	80037b0 <_svfiprintf_r+0x1b0>
 80037da:	bf00      	nop
 80037dc:	08003ed9 	.word	0x08003ed9
 80037e0:	08003edf 	.word	0x08003edf
 80037e4:	08003ee3 	.word	0x08003ee3
 80037e8:	00000000 	.word	0x00000000
 80037ec:	0800354b 	.word	0x0800354b

080037f0 <_printf_common>:
 80037f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f4:	4691      	mov	r9, r2
 80037f6:	461f      	mov	r7, r3
 80037f8:	688a      	ldr	r2, [r1, #8]
 80037fa:	690b      	ldr	r3, [r1, #16]
 80037fc:	4606      	mov	r6, r0
 80037fe:	4293      	cmp	r3, r2
 8003800:	bfb8      	it	lt
 8003802:	4613      	movlt	r3, r2
 8003804:	f8c9 3000 	str.w	r3, [r9]
 8003808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800380c:	460c      	mov	r4, r1
 800380e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003812:	b112      	cbz	r2, 800381a <_printf_common+0x2a>
 8003814:	3301      	adds	r3, #1
 8003816:	f8c9 3000 	str.w	r3, [r9]
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	0699      	lsls	r1, r3, #26
 800381e:	bf42      	ittt	mi
 8003820:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003824:	3302      	addmi	r3, #2
 8003826:	f8c9 3000 	strmi.w	r3, [r9]
 800382a:	6825      	ldr	r5, [r4, #0]
 800382c:	f015 0506 	ands.w	r5, r5, #6
 8003830:	d107      	bne.n	8003842 <_printf_common+0x52>
 8003832:	f104 0a19 	add.w	sl, r4, #25
 8003836:	68e3      	ldr	r3, [r4, #12]
 8003838:	f8d9 2000 	ldr.w	r2, [r9]
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	42ab      	cmp	r3, r5
 8003840:	dc29      	bgt.n	8003896 <_printf_common+0xa6>
 8003842:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003846:	6822      	ldr	r2, [r4, #0]
 8003848:	3300      	adds	r3, #0
 800384a:	bf18      	it	ne
 800384c:	2301      	movne	r3, #1
 800384e:	0692      	lsls	r2, r2, #26
 8003850:	d42e      	bmi.n	80038b0 <_printf_common+0xc0>
 8003852:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003856:	4639      	mov	r1, r7
 8003858:	4630      	mov	r0, r6
 800385a:	47c0      	blx	r8
 800385c:	3001      	adds	r0, #1
 800385e:	d021      	beq.n	80038a4 <_printf_common+0xb4>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	68e5      	ldr	r5, [r4, #12]
 8003864:	f003 0306 	and.w	r3, r3, #6
 8003868:	2b04      	cmp	r3, #4
 800386a:	bf18      	it	ne
 800386c:	2500      	movne	r5, #0
 800386e:	f8d9 2000 	ldr.w	r2, [r9]
 8003872:	f04f 0900 	mov.w	r9, #0
 8003876:	bf08      	it	eq
 8003878:	1aad      	subeq	r5, r5, r2
 800387a:	68a3      	ldr	r3, [r4, #8]
 800387c:	6922      	ldr	r2, [r4, #16]
 800387e:	bf08      	it	eq
 8003880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003884:	4293      	cmp	r3, r2
 8003886:	bfc4      	itt	gt
 8003888:	1a9b      	subgt	r3, r3, r2
 800388a:	18ed      	addgt	r5, r5, r3
 800388c:	341a      	adds	r4, #26
 800388e:	454d      	cmp	r5, r9
 8003890:	d11a      	bne.n	80038c8 <_printf_common+0xd8>
 8003892:	2000      	movs	r0, #0
 8003894:	e008      	b.n	80038a8 <_printf_common+0xb8>
 8003896:	2301      	movs	r3, #1
 8003898:	4652      	mov	r2, sl
 800389a:	4639      	mov	r1, r7
 800389c:	4630      	mov	r0, r6
 800389e:	47c0      	blx	r8
 80038a0:	3001      	adds	r0, #1
 80038a2:	d103      	bne.n	80038ac <_printf_common+0xbc>
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ac:	3501      	adds	r5, #1
 80038ae:	e7c2      	b.n	8003836 <_printf_common+0x46>
 80038b0:	2030      	movs	r0, #48	; 0x30
 80038b2:	18e1      	adds	r1, r4, r3
 80038b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038be:	4422      	add	r2, r4
 80038c0:	3302      	adds	r3, #2
 80038c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038c6:	e7c4      	b.n	8003852 <_printf_common+0x62>
 80038c8:	2301      	movs	r3, #1
 80038ca:	4622      	mov	r2, r4
 80038cc:	4639      	mov	r1, r7
 80038ce:	4630      	mov	r0, r6
 80038d0:	47c0      	blx	r8
 80038d2:	3001      	adds	r0, #1
 80038d4:	d0e6      	beq.n	80038a4 <_printf_common+0xb4>
 80038d6:	f109 0901 	add.w	r9, r9, #1
 80038da:	e7d8      	b.n	800388e <_printf_common+0x9e>

080038dc <_printf_i>:
 80038dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038e4:	460c      	mov	r4, r1
 80038e6:	7e09      	ldrb	r1, [r1, #24]
 80038e8:	b085      	sub	sp, #20
 80038ea:	296e      	cmp	r1, #110	; 0x6e
 80038ec:	4617      	mov	r7, r2
 80038ee:	4606      	mov	r6, r0
 80038f0:	4698      	mov	r8, r3
 80038f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038f4:	f000 80b3 	beq.w	8003a5e <_printf_i+0x182>
 80038f8:	d822      	bhi.n	8003940 <_printf_i+0x64>
 80038fa:	2963      	cmp	r1, #99	; 0x63
 80038fc:	d036      	beq.n	800396c <_printf_i+0x90>
 80038fe:	d80a      	bhi.n	8003916 <_printf_i+0x3a>
 8003900:	2900      	cmp	r1, #0
 8003902:	f000 80b9 	beq.w	8003a78 <_printf_i+0x19c>
 8003906:	2958      	cmp	r1, #88	; 0x58
 8003908:	f000 8083 	beq.w	8003a12 <_printf_i+0x136>
 800390c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003910:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003914:	e032      	b.n	800397c <_printf_i+0xa0>
 8003916:	2964      	cmp	r1, #100	; 0x64
 8003918:	d001      	beq.n	800391e <_printf_i+0x42>
 800391a:	2969      	cmp	r1, #105	; 0x69
 800391c:	d1f6      	bne.n	800390c <_printf_i+0x30>
 800391e:	6820      	ldr	r0, [r4, #0]
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	0605      	lsls	r5, r0, #24
 8003924:	f103 0104 	add.w	r1, r3, #4
 8003928:	d52a      	bpl.n	8003980 <_printf_i+0xa4>
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6011      	str	r1, [r2, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	da03      	bge.n	800393a <_printf_i+0x5e>
 8003932:	222d      	movs	r2, #45	; 0x2d
 8003934:	425b      	negs	r3, r3
 8003936:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800393a:	486f      	ldr	r0, [pc, #444]	; (8003af8 <_printf_i+0x21c>)
 800393c:	220a      	movs	r2, #10
 800393e:	e039      	b.n	80039b4 <_printf_i+0xd8>
 8003940:	2973      	cmp	r1, #115	; 0x73
 8003942:	f000 809d 	beq.w	8003a80 <_printf_i+0x1a4>
 8003946:	d808      	bhi.n	800395a <_printf_i+0x7e>
 8003948:	296f      	cmp	r1, #111	; 0x6f
 800394a:	d020      	beq.n	800398e <_printf_i+0xb2>
 800394c:	2970      	cmp	r1, #112	; 0x70
 800394e:	d1dd      	bne.n	800390c <_printf_i+0x30>
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	f043 0320 	orr.w	r3, r3, #32
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e003      	b.n	8003962 <_printf_i+0x86>
 800395a:	2975      	cmp	r1, #117	; 0x75
 800395c:	d017      	beq.n	800398e <_printf_i+0xb2>
 800395e:	2978      	cmp	r1, #120	; 0x78
 8003960:	d1d4      	bne.n	800390c <_printf_i+0x30>
 8003962:	2378      	movs	r3, #120	; 0x78
 8003964:	4865      	ldr	r0, [pc, #404]	; (8003afc <_printf_i+0x220>)
 8003966:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800396a:	e055      	b.n	8003a18 <_printf_i+0x13c>
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003972:	1d19      	adds	r1, r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6011      	str	r1, [r2, #0]
 8003978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800397c:	2301      	movs	r3, #1
 800397e:	e08c      	b.n	8003a9a <_printf_i+0x1be>
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003986:	6011      	str	r1, [r2, #0]
 8003988:	bf18      	it	ne
 800398a:	b21b      	sxthne	r3, r3
 800398c:	e7cf      	b.n	800392e <_printf_i+0x52>
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	6825      	ldr	r5, [r4, #0]
 8003992:	1d18      	adds	r0, r3, #4
 8003994:	6010      	str	r0, [r2, #0]
 8003996:	0628      	lsls	r0, r5, #24
 8003998:	d501      	bpl.n	800399e <_printf_i+0xc2>
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	e002      	b.n	80039a4 <_printf_i+0xc8>
 800399e:	0668      	lsls	r0, r5, #25
 80039a0:	d5fb      	bpl.n	800399a <_printf_i+0xbe>
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	296f      	cmp	r1, #111	; 0x6f
 80039a6:	bf14      	ite	ne
 80039a8:	220a      	movne	r2, #10
 80039aa:	2208      	moveq	r2, #8
 80039ac:	4852      	ldr	r0, [pc, #328]	; (8003af8 <_printf_i+0x21c>)
 80039ae:	2100      	movs	r1, #0
 80039b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039b4:	6865      	ldr	r5, [r4, #4]
 80039b6:	2d00      	cmp	r5, #0
 80039b8:	60a5      	str	r5, [r4, #8]
 80039ba:	f2c0 8095 	blt.w	8003ae8 <_printf_i+0x20c>
 80039be:	6821      	ldr	r1, [r4, #0]
 80039c0:	f021 0104 	bic.w	r1, r1, #4
 80039c4:	6021      	str	r1, [r4, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d13d      	bne.n	8003a46 <_printf_i+0x16a>
 80039ca:	2d00      	cmp	r5, #0
 80039cc:	f040 808e 	bne.w	8003aec <_printf_i+0x210>
 80039d0:	4665      	mov	r5, ip
 80039d2:	2a08      	cmp	r2, #8
 80039d4:	d10b      	bne.n	80039ee <_printf_i+0x112>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	07db      	lsls	r3, r3, #31
 80039da:	d508      	bpl.n	80039ee <_printf_i+0x112>
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	6862      	ldr	r2, [r4, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	bfde      	ittt	le
 80039e4:	2330      	movle	r3, #48	; 0x30
 80039e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ea:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80039ee:	ebac 0305 	sub.w	r3, ip, r5
 80039f2:	6123      	str	r3, [r4, #16]
 80039f4:	f8cd 8000 	str.w	r8, [sp]
 80039f8:	463b      	mov	r3, r7
 80039fa:	aa03      	add	r2, sp, #12
 80039fc:	4621      	mov	r1, r4
 80039fe:	4630      	mov	r0, r6
 8003a00:	f7ff fef6 	bl	80037f0 <_printf_common>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d14d      	bne.n	8003aa4 <_printf_i+0x1c8>
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a0c:	b005      	add	sp, #20
 8003a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a12:	4839      	ldr	r0, [pc, #228]	; (8003af8 <_printf_i+0x21c>)
 8003a14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	6821      	ldr	r1, [r4, #0]
 8003a1c:	1d1d      	adds	r5, r3, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6015      	str	r5, [r2, #0]
 8003a22:	060a      	lsls	r2, r1, #24
 8003a24:	d50b      	bpl.n	8003a3e <_printf_i+0x162>
 8003a26:	07ca      	lsls	r2, r1, #31
 8003a28:	bf44      	itt	mi
 8003a2a:	f041 0120 	orrmi.w	r1, r1, #32
 8003a2e:	6021      	strmi	r1, [r4, #0]
 8003a30:	b91b      	cbnz	r3, 8003a3a <_printf_i+0x15e>
 8003a32:	6822      	ldr	r2, [r4, #0]
 8003a34:	f022 0220 	bic.w	r2, r2, #32
 8003a38:	6022      	str	r2, [r4, #0]
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	e7b7      	b.n	80039ae <_printf_i+0xd2>
 8003a3e:	064d      	lsls	r5, r1, #25
 8003a40:	bf48      	it	mi
 8003a42:	b29b      	uxthmi	r3, r3
 8003a44:	e7ef      	b.n	8003a26 <_printf_i+0x14a>
 8003a46:	4665      	mov	r5, ip
 8003a48:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a4c:	fb02 3311 	mls	r3, r2, r1, r3
 8003a50:	5cc3      	ldrb	r3, [r0, r3]
 8003a52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a56:	460b      	mov	r3, r1
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	d1f5      	bne.n	8003a48 <_printf_i+0x16c>
 8003a5c:	e7b9      	b.n	80039d2 <_printf_i+0xf6>
 8003a5e:	6813      	ldr	r3, [r2, #0]
 8003a60:	6825      	ldr	r5, [r4, #0]
 8003a62:	1d18      	adds	r0, r3, #4
 8003a64:	6961      	ldr	r1, [r4, #20]
 8003a66:	6010      	str	r0, [r2, #0]
 8003a68:	0628      	lsls	r0, r5, #24
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	d501      	bpl.n	8003a72 <_printf_i+0x196>
 8003a6e:	6019      	str	r1, [r3, #0]
 8003a70:	e002      	b.n	8003a78 <_printf_i+0x19c>
 8003a72:	066a      	lsls	r2, r5, #25
 8003a74:	d5fb      	bpl.n	8003a6e <_printf_i+0x192>
 8003a76:	8019      	strh	r1, [r3, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	4665      	mov	r5, ip
 8003a7c:	6123      	str	r3, [r4, #16]
 8003a7e:	e7b9      	b.n	80039f4 <_printf_i+0x118>
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	1d19      	adds	r1, r3, #4
 8003a84:	6011      	str	r1, [r2, #0]
 8003a86:	681d      	ldr	r5, [r3, #0]
 8003a88:	6862      	ldr	r2, [r4, #4]
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4628      	mov	r0, r5
 8003a8e:	f000 f837 	bl	8003b00 <memchr>
 8003a92:	b108      	cbz	r0, 8003a98 <_printf_i+0x1bc>
 8003a94:	1b40      	subs	r0, r0, r5
 8003a96:	6060      	str	r0, [r4, #4]
 8003a98:	6863      	ldr	r3, [r4, #4]
 8003a9a:	6123      	str	r3, [r4, #16]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa2:	e7a7      	b.n	80039f4 <_printf_i+0x118>
 8003aa4:	6923      	ldr	r3, [r4, #16]
 8003aa6:	462a      	mov	r2, r5
 8003aa8:	4639      	mov	r1, r7
 8003aaa:	4630      	mov	r0, r6
 8003aac:	47c0      	blx	r8
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d0aa      	beq.n	8003a08 <_printf_i+0x12c>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	079b      	lsls	r3, r3, #30
 8003ab6:	d413      	bmi.n	8003ae0 <_printf_i+0x204>
 8003ab8:	68e0      	ldr	r0, [r4, #12]
 8003aba:	9b03      	ldr	r3, [sp, #12]
 8003abc:	4298      	cmp	r0, r3
 8003abe:	bfb8      	it	lt
 8003ac0:	4618      	movlt	r0, r3
 8003ac2:	e7a3      	b.n	8003a0c <_printf_i+0x130>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	464a      	mov	r2, r9
 8003ac8:	4639      	mov	r1, r7
 8003aca:	4630      	mov	r0, r6
 8003acc:	47c0      	blx	r8
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d09a      	beq.n	8003a08 <_printf_i+0x12c>
 8003ad2:	3501      	adds	r5, #1
 8003ad4:	68e3      	ldr	r3, [r4, #12]
 8003ad6:	9a03      	ldr	r2, [sp, #12]
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	42ab      	cmp	r3, r5
 8003adc:	dcf2      	bgt.n	8003ac4 <_printf_i+0x1e8>
 8003ade:	e7eb      	b.n	8003ab8 <_printf_i+0x1dc>
 8003ae0:	2500      	movs	r5, #0
 8003ae2:	f104 0919 	add.w	r9, r4, #25
 8003ae6:	e7f5      	b.n	8003ad4 <_printf_i+0x1f8>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ac      	bne.n	8003a46 <_printf_i+0x16a>
 8003aec:	7803      	ldrb	r3, [r0, #0]
 8003aee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003af2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003af6:	e76c      	b.n	80039d2 <_printf_i+0xf6>
 8003af8:	08003eea 	.word	0x08003eea
 8003afc:	08003efb 	.word	0x08003efb

08003b00 <memchr>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	b2c9      	uxtb	r1, r1
 8003b04:	4402      	add	r2, r0
 8003b06:	4290      	cmp	r0, r2
 8003b08:	4603      	mov	r3, r0
 8003b0a:	d101      	bne.n	8003b10 <memchr+0x10>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e003      	b.n	8003b18 <memchr+0x18>
 8003b10:	781c      	ldrb	r4, [r3, #0]
 8003b12:	3001      	adds	r0, #1
 8003b14:	428c      	cmp	r4, r1
 8003b16:	d1f6      	bne.n	8003b06 <memchr+0x6>
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd10      	pop	{r4, pc}

08003b1c <memmove>:
 8003b1c:	4288      	cmp	r0, r1
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	eb01 0302 	add.w	r3, r1, r2
 8003b24:	d807      	bhi.n	8003b36 <memmove+0x1a>
 8003b26:	1e42      	subs	r2, r0, #1
 8003b28:	4299      	cmp	r1, r3
 8003b2a:	d00a      	beq.n	8003b42 <memmove+0x26>
 8003b2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b34:	e7f8      	b.n	8003b28 <memmove+0xc>
 8003b36:	4283      	cmp	r3, r0
 8003b38:	d9f5      	bls.n	8003b26 <memmove+0xa>
 8003b3a:	1881      	adds	r1, r0, r2
 8003b3c:	1ad2      	subs	r2, r2, r3
 8003b3e:	42d3      	cmn	r3, r2
 8003b40:	d100      	bne.n	8003b44 <memmove+0x28>
 8003b42:	bd10      	pop	{r4, pc}
 8003b44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b4c:	e7f7      	b.n	8003b3e <memmove+0x22>
	...

08003b50 <_free_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4605      	mov	r5, r0
 8003b54:	2900      	cmp	r1, #0
 8003b56:	d043      	beq.n	8003be0 <_free_r+0x90>
 8003b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5c:	1f0c      	subs	r4, r1, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfb8      	it	lt
 8003b62:	18e4      	addlt	r4, r4, r3
 8003b64:	f000 f8d0 	bl	8003d08 <__malloc_lock>
 8003b68:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <_free_r+0x94>)
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	b933      	cbnz	r3, 8003b7e <_free_r+0x2e>
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	6014      	str	r4, [r2, #0]
 8003b74:	4628      	mov	r0, r5
 8003b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b7a:	f000 b8c6 	b.w	8003d0a <__malloc_unlock>
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	d90b      	bls.n	8003b9a <_free_r+0x4a>
 8003b82:	6821      	ldr	r1, [r4, #0]
 8003b84:	1862      	adds	r2, r4, r1
 8003b86:	4293      	cmp	r3, r2
 8003b88:	bf01      	itttt	eq
 8003b8a:	681a      	ldreq	r2, [r3, #0]
 8003b8c:	685b      	ldreq	r3, [r3, #4]
 8003b8e:	1852      	addeq	r2, r2, r1
 8003b90:	6022      	streq	r2, [r4, #0]
 8003b92:	6063      	str	r3, [r4, #4]
 8003b94:	6004      	str	r4, [r0, #0]
 8003b96:	e7ed      	b.n	8003b74 <_free_r+0x24>
 8003b98:	4613      	mov	r3, r2
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	b10a      	cbz	r2, 8003ba2 <_free_r+0x52>
 8003b9e:	42a2      	cmp	r2, r4
 8003ba0:	d9fa      	bls.n	8003b98 <_free_r+0x48>
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	1858      	adds	r0, r3, r1
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	d10b      	bne.n	8003bc2 <_free_r+0x72>
 8003baa:	6820      	ldr	r0, [r4, #0]
 8003bac:	4401      	add	r1, r0
 8003bae:	1858      	adds	r0, r3, r1
 8003bb0:	4282      	cmp	r2, r0
 8003bb2:	6019      	str	r1, [r3, #0]
 8003bb4:	d1de      	bne.n	8003b74 <_free_r+0x24>
 8003bb6:	6810      	ldr	r0, [r2, #0]
 8003bb8:	6852      	ldr	r2, [r2, #4]
 8003bba:	4401      	add	r1, r0
 8003bbc:	6019      	str	r1, [r3, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	e7d8      	b.n	8003b74 <_free_r+0x24>
 8003bc2:	d902      	bls.n	8003bca <_free_r+0x7a>
 8003bc4:	230c      	movs	r3, #12
 8003bc6:	602b      	str	r3, [r5, #0]
 8003bc8:	e7d4      	b.n	8003b74 <_free_r+0x24>
 8003bca:	6820      	ldr	r0, [r4, #0]
 8003bcc:	1821      	adds	r1, r4, r0
 8003bce:	428a      	cmp	r2, r1
 8003bd0:	bf01      	itttt	eq
 8003bd2:	6811      	ldreq	r1, [r2, #0]
 8003bd4:	6852      	ldreq	r2, [r2, #4]
 8003bd6:	1809      	addeq	r1, r1, r0
 8003bd8:	6021      	streq	r1, [r4, #0]
 8003bda:	6062      	str	r2, [r4, #4]
 8003bdc:	605c      	str	r4, [r3, #4]
 8003bde:	e7c9      	b.n	8003b74 <_free_r+0x24>
 8003be0:	bd38      	pop	{r3, r4, r5, pc}
 8003be2:	bf00      	nop
 8003be4:	200011cc 	.word	0x200011cc

08003be8 <_malloc_r>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	1ccd      	adds	r5, r1, #3
 8003bec:	f025 0503 	bic.w	r5, r5, #3
 8003bf0:	3508      	adds	r5, #8
 8003bf2:	2d0c      	cmp	r5, #12
 8003bf4:	bf38      	it	cc
 8003bf6:	250c      	movcc	r5, #12
 8003bf8:	2d00      	cmp	r5, #0
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	db01      	blt.n	8003c02 <_malloc_r+0x1a>
 8003bfe:	42a9      	cmp	r1, r5
 8003c00:	d903      	bls.n	8003c0a <_malloc_r+0x22>
 8003c02:	230c      	movs	r3, #12
 8003c04:	6033      	str	r3, [r6, #0]
 8003c06:	2000      	movs	r0, #0
 8003c08:	bd70      	pop	{r4, r5, r6, pc}
 8003c0a:	f000 f87d 	bl	8003d08 <__malloc_lock>
 8003c0e:	4a21      	ldr	r2, [pc, #132]	; (8003c94 <_malloc_r+0xac>)
 8003c10:	6814      	ldr	r4, [r2, #0]
 8003c12:	4621      	mov	r1, r4
 8003c14:	b991      	cbnz	r1, 8003c3c <_malloc_r+0x54>
 8003c16:	4c20      	ldr	r4, [pc, #128]	; (8003c98 <_malloc_r+0xb0>)
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	b91b      	cbnz	r3, 8003c24 <_malloc_r+0x3c>
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f000 f863 	bl	8003ce8 <_sbrk_r>
 8003c22:	6020      	str	r0, [r4, #0]
 8003c24:	4629      	mov	r1, r5
 8003c26:	4630      	mov	r0, r6
 8003c28:	f000 f85e 	bl	8003ce8 <_sbrk_r>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d124      	bne.n	8003c7a <_malloc_r+0x92>
 8003c30:	230c      	movs	r3, #12
 8003c32:	4630      	mov	r0, r6
 8003c34:	6033      	str	r3, [r6, #0]
 8003c36:	f000 f868 	bl	8003d0a <__malloc_unlock>
 8003c3a:	e7e4      	b.n	8003c06 <_malloc_r+0x1e>
 8003c3c:	680b      	ldr	r3, [r1, #0]
 8003c3e:	1b5b      	subs	r3, r3, r5
 8003c40:	d418      	bmi.n	8003c74 <_malloc_r+0x8c>
 8003c42:	2b0b      	cmp	r3, #11
 8003c44:	d90f      	bls.n	8003c66 <_malloc_r+0x7e>
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	18cc      	adds	r4, r1, r3
 8003c4a:	50cd      	str	r5, [r1, r3]
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f000 f85c 	bl	8003d0a <__malloc_unlock>
 8003c52:	f104 000b 	add.w	r0, r4, #11
 8003c56:	1d23      	adds	r3, r4, #4
 8003c58:	f020 0007 	bic.w	r0, r0, #7
 8003c5c:	1ac3      	subs	r3, r0, r3
 8003c5e:	d0d3      	beq.n	8003c08 <_malloc_r+0x20>
 8003c60:	425a      	negs	r2, r3
 8003c62:	50e2      	str	r2, [r4, r3]
 8003c64:	e7d0      	b.n	8003c08 <_malloc_r+0x20>
 8003c66:	684b      	ldr	r3, [r1, #4]
 8003c68:	428c      	cmp	r4, r1
 8003c6a:	bf16      	itet	ne
 8003c6c:	6063      	strne	r3, [r4, #4]
 8003c6e:	6013      	streq	r3, [r2, #0]
 8003c70:	460c      	movne	r4, r1
 8003c72:	e7eb      	b.n	8003c4c <_malloc_r+0x64>
 8003c74:	460c      	mov	r4, r1
 8003c76:	6849      	ldr	r1, [r1, #4]
 8003c78:	e7cc      	b.n	8003c14 <_malloc_r+0x2c>
 8003c7a:	1cc4      	adds	r4, r0, #3
 8003c7c:	f024 0403 	bic.w	r4, r4, #3
 8003c80:	42a0      	cmp	r0, r4
 8003c82:	d005      	beq.n	8003c90 <_malloc_r+0xa8>
 8003c84:	1a21      	subs	r1, r4, r0
 8003c86:	4630      	mov	r0, r6
 8003c88:	f000 f82e 	bl	8003ce8 <_sbrk_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d0cf      	beq.n	8003c30 <_malloc_r+0x48>
 8003c90:	6025      	str	r5, [r4, #0]
 8003c92:	e7db      	b.n	8003c4c <_malloc_r+0x64>
 8003c94:	200011cc 	.word	0x200011cc
 8003c98:	200011d0 	.word	0x200011d0

08003c9c <_realloc_r>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	4607      	mov	r7, r0
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	460e      	mov	r6, r1
 8003ca4:	b921      	cbnz	r1, 8003cb0 <_realloc_r+0x14>
 8003ca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003caa:	4611      	mov	r1, r2
 8003cac:	f7ff bf9c 	b.w	8003be8 <_malloc_r>
 8003cb0:	b922      	cbnz	r2, 8003cbc <_realloc_r+0x20>
 8003cb2:	f7ff ff4d 	bl	8003b50 <_free_r>
 8003cb6:	4625      	mov	r5, r4
 8003cb8:	4628      	mov	r0, r5
 8003cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cbc:	f000 f826 	bl	8003d0c <_malloc_usable_size_r>
 8003cc0:	42a0      	cmp	r0, r4
 8003cc2:	d20f      	bcs.n	8003ce4 <_realloc_r+0x48>
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4638      	mov	r0, r7
 8003cc8:	f7ff ff8e 	bl	8003be8 <_malloc_r>
 8003ccc:	4605      	mov	r5, r0
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d0f2      	beq.n	8003cb8 <_realloc_r+0x1c>
 8003cd2:	4631      	mov	r1, r6
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	f7ff fbdd 	bl	8003494 <memcpy>
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7ff ff37 	bl	8003b50 <_free_r>
 8003ce2:	e7e9      	b.n	8003cb8 <_realloc_r+0x1c>
 8003ce4:	4635      	mov	r5, r6
 8003ce6:	e7e7      	b.n	8003cb8 <_realloc_r+0x1c>

08003ce8 <_sbrk_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	2300      	movs	r3, #0
 8003cec:	4c05      	ldr	r4, [pc, #20]	; (8003d04 <_sbrk_r+0x1c>)
 8003cee:	4605      	mov	r5, r0
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	f7ff fb1e 	bl	8003334 <_sbrk>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_sbrk_r+0x1a>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_sbrk_r+0x1a>
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	2000124c 	.word	0x2000124c

08003d08 <__malloc_lock>:
 8003d08:	4770      	bx	lr

08003d0a <__malloc_unlock>:
 8003d0a:	4770      	bx	lr

08003d0c <_malloc_usable_size_r>:
 8003d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d10:	1f18      	subs	r0, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bfbc      	itt	lt
 8003d16:	580b      	ldrlt	r3, [r1, r0]
 8003d18:	18c0      	addlt	r0, r0, r3
 8003d1a:	4770      	bx	lr

08003d1c <_init>:
 8003d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1e:	bf00      	nop
 8003d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d22:	bc08      	pop	{r3}
 8003d24:	469e      	mov	lr, r3
 8003d26:	4770      	bx	lr

08003d28 <_fini>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	bf00      	nop
 8003d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2e:	bc08      	pop	{r3}
 8003d30:	469e      	mov	lr, r3
 8003d32:	4770      	bx	lr
